# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class SupplierLinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_supplier_product_link(self, **kwargs):  # noqa: E501
        """Create a new product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplier_product_link(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierProductLinkForCreationDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_supplier_product_link_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_supplier_product_link_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_supplier_product_link_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplier_product_link_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierProductLinkForCreationDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_supplier_product_link_for_product(self, product_id, **kwargs):  # noqa: E501
        """Create a new product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplier_product_link_for_product(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param SupplierProductLinkForCreationDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_supplier_product_link_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_supplier_product_link_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def create_supplier_product_link_for_product_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """Create a new product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplier_product_link_for_product_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param SupplierProductLinkForCreationDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_supplier_product_link_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `create_supplier_product_link_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_supplier_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Delete a product link. Active product links (Pending, Accepted) cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_supplier_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def delete_supplier_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Delete a product link. Active product links (Pending, Accepted) cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_supplier_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `delete_supplier_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks/{productLinkId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_supplier_product_link_for_product(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Delete a product link. Active product links (Pending, Accepted) cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_supplier_product_link_for_product(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
            return data

    def delete_supplier_product_link_for_product_with_http_info(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Delete a product link. Active product links (Pending, Accepted) cannot be deleted  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_supplier_product_link_for_product_with_http_info(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'product_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_supplier_product_link_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `delete_supplier_product_link_for_product`")  # noqa: E501
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `delete_supplier_product_link_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks/{productLinkId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Returns a specified supplier product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: The unique identifier for the product link to return (required)
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Returns a specified supplier product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: The unique identifier for the product link to return (required)
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `get_supplier_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks/{productLinkId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_product_link_for_product(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """For the product with Id {productId}, return a specified supplier product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_link_for_product(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: The unique identifier for the product whose links we are querying (required)
        :param str product_link_id: The unique identifier for the product link to return (required)
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_product_link_for_product_with_http_info(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """For the product with Id {productId}, return a specified supplier product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_link_for_product_with_http_info(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: The unique identifier for the product whose links we are querying (required)
        :param str product_link_id: The unique identifier for the product link to return (required)
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'product_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_product_link_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_supplier_product_link_for_product`")  # noqa: E501
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `get_supplier_product_link_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks/{productLinkId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_product_links(self, **kwargs):  # noqa: E501
        """Returns a list of all supplier product links meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_links(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: Limit the returned links to those for a specific supplier Id
        :param str supplier_name: Limit the returned links to those for a specific supplier name
        :param str order_by: Order the results
        :param str status: Limit the returned links by link status
        :param datetime start_date: Limit the returned link to those where the status was updated on or after this date
        :param datetime end_date: Limit the returned link to those where the status updated before this date
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SupplierProductLinkDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_product_links_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_product_links_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_supplier_product_links_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all supplier product links meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_links_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: Limit the returned links to those for a specific supplier Id
        :param str supplier_name: Limit the returned links to those for a specific supplier name
        :param str order_by: Order the results
        :param str status: Limit the returned links by link status
        :param datetime start_date: Limit the returned link to those where the status was updated on or after this date
        :param datetime end_date: Limit the returned link to those where the status updated before this date
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SupplierProductLinkDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'supplier_name', 'order_by', 'status', 'start_date', 'end_date', 'search_query', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_product_links" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'supplier_id' in params:
            query_params.append(('SupplierId', params['supplier_id']))  # noqa: E501
        if 'supplier_name' in params:
            query_params.append(('SupplierName', params['supplier_name']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'status' in params:
            query_params.append(('Status', params['status']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierProductLinkDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_product_links_for_product(self, product_id, **kwargs):  # noqa: E501
        """For the product with Id {productId}, return a list of all supplier product links for meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_links_for_product(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str supplier_id: Limit the returned links to those for a specific supplier Id
        :param str supplier_name: Limit the returned links to those for a specific supplier name
        :param str order_by: Order the results
        :param str status: Limit the returned links by link status
        :param datetime start_date: Limit the returned link to those where the status was updated on or after this date
        :param datetime end_date: Limit the returned link to those where the status updated before this date
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SupplierProductLinkDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_product_links_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_product_links_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_product_links_for_product_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """For the product with Id {productId}, return a list of all supplier product links for meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_product_links_for_product_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str supplier_id: Limit the returned links to those for a specific supplier Id
        :param str supplier_name: Limit the returned links to those for a specific supplier name
        :param str order_by: Order the results
        :param str status: Limit the returned links by link status
        :param datetime start_date: Limit the returned link to those where the status was updated on or after this date
        :param datetime end_date: Limit the returned link to those where the status updated before this date
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SupplierProductLinkDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'supplier_id', 'supplier_name', 'order_by', 'status', 'start_date', 'end_date', 'search_query', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_product_links_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_supplier_product_links_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []
        if 'supplier_id' in params:
            query_params.append(('SupplierId', params['supplier_id']))  # noqa: E501
        if 'supplier_name' in params:
            query_params.append(('SupplierName', params['supplier_name']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'status' in params:
            query_params.append(('Status', params['status']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierProductLinkDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_supplier_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Remove an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplier_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def remove_supplier_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Remove an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplier_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `remove_supplier_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks/{productLinkId}/Remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_supplier_product_link_for_product(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Remove an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplier_product_link_for_product(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
            return data

    def remove_supplier_product_link_for_product_with_http_info(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Remove an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplier_product_link_for_product_with_http_info(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'product_link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_supplier_product_link_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `remove_supplier_product_link_for_product`")  # noqa: E501
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `remove_supplier_product_link_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks/{productLinkId}/Remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rescind_supplier_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Rescind an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rescind_supplier_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rescind_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rescind_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def rescind_supplier_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Rescind an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rescind_supplier_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rescind_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `rescind_supplier_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks/{productLinkId}/Rescind', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rescind_supplier_product_link_for_product(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Rescind an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rescind_supplier_product_link_for_product(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rescind_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rescind_supplier_product_link_for_product_with_http_info(product_id, product_link_id, **kwargs)  # noqa: E501
            return data

    def rescind_supplier_product_link_for_product_with_http_info(self, product_id, product_link_id, **kwargs):  # noqa: E501
        """Rescind an active product link request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rescind_supplier_product_link_for_product_with_http_info(product_id, product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :param str product_link_id: (required)
        :param ProductLinkRemovalDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'product_link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rescind_supplier_product_link_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `rescind_supplier_product_link_for_product`")  # noqa: E501
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `rescind_supplier_product_link_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Products/{productId}/SupplierLinks/{productLinkId}/Rescind', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_supplier_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Update a product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplier_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param SupplierProductLinkForUpdateDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_supplier_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def update_supplier_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Update a product link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplier_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :param SupplierProductLinkForUpdateDto body:
        :return: SupplierProductLinkDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_supplier_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `update_supplier_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplierLinks/{productLinkId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierProductLinkDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
