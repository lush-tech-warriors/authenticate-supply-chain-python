# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class CompanyLicenceRequestsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_companies_company_id_licence_requests_licence_request_id_complete_post(self, company_id, licence_request_id, **kwargs):  # noqa: E501
        """Sets a company licence request as completed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_company_id_licence_requests_licence_request_id_complete_post(company_id, licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str licence_request_id: (required)
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_companies_company_id_licence_requests_licence_request_id_complete_post_with_http_info(company_id, licence_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_companies_company_id_licence_requests_licence_request_id_complete_post_with_http_info(company_id, licence_request_id, **kwargs)  # noqa: E501
            return data

    def api_v1_companies_company_id_licence_requests_licence_request_id_complete_post_with_http_info(self, company_id, licence_request_id, **kwargs):  # noqa: E501
        """Sets a company licence request as completed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_company_id_licence_requests_licence_request_id_complete_post_with_http_info(company_id, licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str licence_request_id: (required)
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'licence_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_company_id_licence_requests_licence_request_id_complete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `api_v1_companies_company_id_licence_requests_licence_request_id_complete_post`")  # noqa: E501
        # verify the required parameter 'licence_request_id' is set
        if ('licence_request_id' not in params or
                params['licence_request_id'] is None):
            raise ValueError("Missing the required parameter `licence_request_id` when calling `api_v1_companies_company_id_licence_requests_licence_request_id_complete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'licence_request_id' in params:
            path_params['licenceRequestId'] = params['licence_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/LicenceRequests/{licenceRequestId}/Complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenceRequestDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_companies_company_id_licence_requests_licence_request_id_reject_post(self, company_id, licence_request_id, **kwargs):  # noqa: E501
        """Sets a company licence request as rejected and sets a reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_company_id_licence_requests_licence_request_id_reject_post(company_id, licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str licence_request_id: (required)
        :param LicenceRequestReasonDto body:
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_companies_company_id_licence_requests_licence_request_id_reject_post_with_http_info(company_id, licence_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_companies_company_id_licence_requests_licence_request_id_reject_post_with_http_info(company_id, licence_request_id, **kwargs)  # noqa: E501
            return data

    def api_v1_companies_company_id_licence_requests_licence_request_id_reject_post_with_http_info(self, company_id, licence_request_id, **kwargs):  # noqa: E501
        """Sets a company licence request as rejected and sets a reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_company_id_licence_requests_licence_request_id_reject_post_with_http_info(company_id, licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str licence_request_id: (required)
        :param LicenceRequestReasonDto body:
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'licence_request_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_company_id_licence_requests_licence_request_id_reject_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `api_v1_companies_company_id_licence_requests_licence_request_id_reject_post`")  # noqa: E501
        # verify the required parameter 'licence_request_id' is set
        if ('licence_request_id' not in params or
                params['licence_request_id'] is None):
            raise ValueError("Missing the required parameter `licence_request_id` when calling `api_v1_companies_company_id_licence_requests_licence_request_id_reject_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'licence_request_id' in params:
            path_params['licenceRequestId'] = params['licence_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/LicenceRequests/{licenceRequestId}/Reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenceRequestDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_companies_licence_requests_get(self, **kwargs):  # noqa: E501
        """Returns a list of licence requests for your company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_licence_requests_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_completed: Include completed licence requests
        :param LicenceRequestEnum status: Filter licence requests by status
        :param datetime created_date_from: Filter licence requests by created date, specifying a from date
        :param datetime created_date_to: Filter licence requests by created date, specifying a to date
        :param str requested_for_company_id: Filter licence requests by a specific requesting company id
        :return: list[LicenceRequestDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_companies_licence_requests_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_companies_licence_requests_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_companies_licence_requests_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of licence requests for your company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_licence_requests_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_completed: Include completed licence requests
        :param LicenceRequestEnum status: Filter licence requests by status
        :param datetime created_date_from: Filter licence requests by created date, specifying a from date
        :param datetime created_date_to: Filter licence requests by created date, specifying a to date
        :param str requested_for_company_id: Filter licence requests by a specific requesting company id
        :return: list[LicenceRequestDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_completed', 'status', 'created_date_from', 'created_date_to', 'requested_for_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_licence_requests_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_completed' in params:
            query_params.append(('IncludeCompleted', params['include_completed']))  # noqa: E501
        if 'status' in params:
            query_params.append(('Status', params['status']))  # noqa: E501
        if 'created_date_from' in params:
            query_params.append(('CreatedDateFrom', params['created_date_from']))  # noqa: E501
        if 'created_date_to' in params:
            query_params.append(('CreatedDateTo', params['created_date_to']))  # noqa: E501
        if 'requested_for_company_id' in params:
            query_params.append(('RequestedForCompanyId', params['requested_for_company_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/LicenceRequests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LicenceRequestDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_companies_licence_requests_licence_request_id_get(self, licence_request_id, **kwargs):  # noqa: E501
        """Returns a licence request assigned to your company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_licence_requests_licence_request_id_get(licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_request_id: (required)
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_companies_licence_requests_licence_request_id_get_with_http_info(licence_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_companies_licence_requests_licence_request_id_get_with_http_info(licence_request_id, **kwargs)  # noqa: E501
            return data

    def api_v1_companies_licence_requests_licence_request_id_get_with_http_info(self, licence_request_id, **kwargs):  # noqa: E501
        """Returns a licence request assigned to your company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_companies_licence_requests_licence_request_id_get_with_http_info(licence_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str licence_request_id: (required)
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['licence_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_companies_licence_requests_licence_request_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'licence_request_id' is set
        if ('licence_request_id' not in params or
                params['licence_request_id'] is None):
            raise ValueError("Missing the required parameter `licence_request_id` when calling `api_v1_companies_licence_requests_licence_request_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'licence_request_id' in params:
            path_params['licenceRequestId'] = params['licence_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/LicenceRequests/{licenceRequestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenceRequestDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_company_licence_request(self, company_id, **kwargs):  # noqa: E501
        """Create a company licence request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_company_licence_request(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param LicenceRequestDtoForCreation body:
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_company_licence_request_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_company_licence_request_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def create_company_licence_request_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Create a company licence request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_company_licence_request_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param LicenceRequestDtoForCreation body:
        :return: LicenceRequestDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_company_licence_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `create_company_licence_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/LicenceRequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenceRequestDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
