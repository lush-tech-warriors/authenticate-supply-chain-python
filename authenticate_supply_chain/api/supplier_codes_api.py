# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class SupplierCodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def companies_create_company_supplier_code(self, company_id, **kwargs):  # noqa: E501
        """Create a new supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_create_company_supplier_code(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_create_company_supplier_code_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_create_company_supplier_code_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def companies_create_company_supplier_code_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Create a new supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_create_company_supplier_code_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_create_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_create_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/SupplierCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_create_site_supplier_code(self, company_id, site_id, **kwargs):  # noqa: E501
        """Create a new site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_create_site_supplier_code(company_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_create_site_supplier_code_with_http_info(company_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_create_site_supplier_code_with_http_info(company_id, site_id, **kwargs)  # noqa: E501
            return data

    def companies_create_site_supplier_code_with_http_info(self, company_id, site_id, **kwargs):  # noqa: E501
        """Create a new site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_create_site_supplier_code_with_http_info(company_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_create_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_create_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `companies_create_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/Sites/{siteId}/SupplierCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_delete_company_supplier_code(self, company_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_delete_company_supplier_code(company_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_delete_company_supplier_code_with_http_info(company_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_delete_company_supplier_code_with_http_info(company_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def companies_delete_company_supplier_code_with_http_info(self, company_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_delete_company_supplier_code_with_http_info(company_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_delete_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_delete_company_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `companies_delete_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/SupplierCodes/{supplierCodeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_delete_site_supplier_code(self, company_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a site supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_delete_site_supplier_code(company_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_delete_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_delete_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def companies_delete_site_supplier_code_with_http_info(self, company_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a site supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_delete_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'site_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_delete_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_delete_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `companies_delete_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `companies_delete_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/Sites/{siteId}/SupplierCodes/{supplierCodeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_get_company_supplier_code(self, company_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_company_supplier_code(company_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_get_company_supplier_code_with_http_info(company_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_get_company_supplier_code_with_http_info(company_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def companies_get_company_supplier_code_with_http_info(self, company_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_company_supplier_code_with_http_info(company_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_get_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_get_company_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `companies_get_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/SupplierCodes/{supplierCodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_get_company_supplier_codes(self, company_id, **kwargs):  # noqa: E501
        """Returns a list of all Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_company_supplier_codes(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_get_company_supplier_codes_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_get_company_supplier_codes_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def companies_get_company_supplier_codes_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Returns a list of all Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_company_supplier_codes_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_get_company_supplier_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_get_company_supplier_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/SupplierCodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierCodeDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_get_site_supplier_code(self, company_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_site_supplier_code(company_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_get_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_get_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def companies_get_site_supplier_code_with_http_info(self, company_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_site_supplier_code_with_http_info(company_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'site_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_get_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_get_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `companies_get_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `companies_get_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/Sites/{siteId}/SupplierCodes/{supplierCodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def companies_get_site_supplier_codes(self, company_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all site Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_site_supplier_codes(company_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.companies_get_site_supplier_codes_with_http_info(company_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_get_site_supplier_codes_with_http_info(company_id, site_id, **kwargs)  # noqa: E501
            return data

    def companies_get_site_supplier_codes_with_http_info(self, company_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all site Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_get_site_supplier_codes_with_http_info(company_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: The unique identifier of the company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'site_id', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_get_site_supplier_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_get_site_supplier_codes`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `companies_get_site_supplier_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Companies/{companyId}/Sites/{siteId}/SupplierCodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierCodeDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_create_company_supplier_code(self, supplier_id, **kwargs):  # noqa: E501
        """Create a new supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_create_company_supplier_code(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_create_company_supplier_code_with_http_info(supplier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_create_company_supplier_code_with_http_info(supplier_id, **kwargs)  # noqa: E501
            return data

    def suppliers_create_company_supplier_code_with_http_info(self, supplier_id, **kwargs):  # noqa: E501
        """Create a new supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_create_company_supplier_code_with_http_info(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_create_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_create_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/SupplierCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_create_site_supplier_code(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Create a new site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_create_site_supplier_code(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_create_site_supplier_code_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_create_site_supplier_code_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
            return data

    def suppliers_create_site_supplier_code_with_http_info(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Create a new site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_create_site_supplier_code_with_http_info(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param SupplierCodeForCreationDto body:
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_create_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_create_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `suppliers_create_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/SupplierCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_delete_company_supplier_code(self, supplier_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_delete_company_supplier_code(supplier_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_delete_company_supplier_code_with_http_info(supplier_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_delete_company_supplier_code_with_http_info(supplier_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def suppliers_delete_company_supplier_code_with_http_info(self, supplier_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_delete_company_supplier_code_with_http_info(supplier_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_delete_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_delete_company_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `suppliers_delete_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/SupplierCodes/{supplierCodeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_delete_site_supplier_code(self, supplier_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a site supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_delete_site_supplier_code(supplier_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_delete_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_delete_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def suppliers_delete_site_supplier_code_with_http_info(self, supplier_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Delete a site supplier code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_delete_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_delete_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_delete_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `suppliers_delete_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `suppliers_delete_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/SupplierCodes/{supplierCodeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_get_company_supplier_code(self, supplier_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_company_supplier_code(supplier_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_get_company_supplier_code_with_http_info(supplier_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_get_company_supplier_code_with_http_info(supplier_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def suppliers_get_company_supplier_code_with_http_info(self, supplier_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_company_supplier_code_with_http_info(supplier_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_get_company_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_get_company_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `suppliers_get_company_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/SupplierCodes/{supplierCodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_get_company_supplier_codes(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_company_supplier_codes(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_get_company_supplier_codes_with_http_info(supplier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_get_company_supplier_codes_with_http_info(supplier_id, **kwargs)  # noqa: E501
            return data

    def suppliers_get_company_supplier_codes_with_http_info(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_company_supplier_codes_with_http_info(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_get_company_supplier_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_get_company_supplier_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501

        query_params = []
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/SupplierCodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierCodeDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_get_site_supplier_code(self, supplier_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_site_supplier_code(supplier_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_get_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_get_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, **kwargs)  # noqa: E501
            return data

    def suppliers_get_site_supplier_code_with_http_info(self, supplier_id, site_id, supplier_code_id, **kwargs):  # noqa: E501
        """Returns a specified site supplier code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_site_supplier_code_with_http_info(supplier_id, site_id, supplier_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str supplier_code_id: The unique identifier for the supplier code to return (required)
        :return: SupplierCodeDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'supplier_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_get_site_supplier_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_get_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `suppliers_get_site_supplier_code`")  # noqa: E501
        # verify the required parameter 'supplier_code_id' is set
        if ('supplier_code_id' not in params or
                params['supplier_code_id'] is None):
            raise ValueError("Missing the required parameter `supplier_code_id` when calling `suppliers_get_site_supplier_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'supplier_code_id' in params:
            path_params['supplierCodeId'] = params['supplier_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/SupplierCodes/{supplierCodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierCodeDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppliers_get_site_supplier_codes(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all site Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_site_supplier_codes(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppliers_get_site_supplier_codes_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppliers_get_site_supplier_codes_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
            return data

    def suppliers_get_site_supplier_codes_with_http_info(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all site Supplier Codes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppliers_get_site_supplier_codes_with_http_info(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: The unique identifier of the supplier company (required)
        :param str site_id: The unique identifier for the supplier site (required)
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SupplierCodeDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppliers_get_site_supplier_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `suppliers_get_site_supplier_codes`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `suppliers_get_site_supplier_codes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/SupplierCodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierCodeDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
