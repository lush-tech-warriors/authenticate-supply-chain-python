# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class SiteRelationshipApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_site_relationship_site_id_patch(self, site_id, **kwargs):  # noqa: E501
        """Partially update a site relationship. Only provided fields will be updated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_patch(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param list[Operation] body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_site_relationship_site_id_patch_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_site_relationship_site_id_patch_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def api_v1_site_relationship_site_id_patch_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Partially update a site relationship. Only provided fields will be updated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_patch_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param list[Operation] body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_site_relationship_site_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `api_v1_site_relationship_site_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SiteRelationship/{siteId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRelationshipDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_site_relationship_site_id_post(self, site_id, **kwargs):  # noqa: E501
        """Create a new site relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteRelationshipForManipulationDto body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_site_relationship_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_site_relationship_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def api_v1_site_relationship_site_id_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Create a new site relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteRelationshipForManipulationDto body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_site_relationship_site_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `api_v1_site_relationship_site_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SiteRelationship/{siteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRelationshipDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_site_relationship_site_id_put(self, site_id, **kwargs):  # noqa: E501
        """Update an existing site relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_put(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteRelationshipForManipulationDto body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_site_relationship_site_id_put_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_site_relationship_site_id_put_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def api_v1_site_relationship_site_id_put_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Update an existing site relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_site_relationship_site_id_put_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteRelationshipForManipulationDto body:
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_site_relationship_site_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `api_v1_site_relationship_site_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SiteRelationship/{siteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRelationshipDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_site_relationship_values(self, site_id, **kwargs):  # noqa: E501
        """Returns a specified site relationship's values based on viewing company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_relationship_values(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier for the company to site relationship to return (required)
        :param str order_by: Order the results
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SiteRelationshipValuesDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_site_relationship_values_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_site_relationship_values_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_all_site_relationship_values_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Returns a specified site relationship's values based on viewing company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_relationship_values_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier for the company to site relationship to return (required)
        :param str order_by: Order the results
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[SiteRelationshipValuesDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'order_by', 'search_query', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_site_relationship_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_all_site_relationship_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SiteRelationship/{siteId}/History', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteRelationshipValuesDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_relationship(self, site_id, **kwargs):  # noqa: E501
        """Returns a specified site relationship based on viewing company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_relationship(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier for the company to site relationship to return (required)
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_relationship_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_relationship_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_relationship_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Returns a specified site relationship based on viewing company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_relationship_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier for the company to site relationship to return (required)
        :return: SiteRelationshipDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_relationship" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_relationship`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SiteRelationship/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRelationshipDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
