# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class ProductLineVariationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_product_line_variations_product_line_variation_id_delete(self, product_line_variation_id, **kwargs):  # noqa: E501
        """Delete a product line variation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_line_variations_product_line_variation_id_delete(product_line_variation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_variation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_product_line_variations_product_line_variation_id_delete_with_http_info(product_line_variation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_product_line_variations_product_line_variation_id_delete_with_http_info(product_line_variation_id, **kwargs)  # noqa: E501
            return data

    def api_v1_product_line_variations_product_line_variation_id_delete_with_http_info(self, product_line_variation_id, **kwargs):  # noqa: E501
        """Delete a product line variation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_line_variations_product_line_variation_id_delete_with_http_info(product_line_variation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_variation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_line_variation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_product_line_variations_product_line_variation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_line_variation_id' is set
        if ('product_line_variation_id' not in params or
                params['product_line_variation_id'] is None):
            raise ValueError("Missing the required parameter `product_line_variation_id` when calling `api_v1_product_line_variations_product_line_variation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_line_variation_id' in params:
            path_params['productLineVariationId'] = params['product_line_variation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ProductLineVariations/{productLineVariationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_product_line_variations_product_line_variation_id_put(self, product_line_variation_id, **kwargs):  # noqa: E501
        """Fully update a product line variation. All elements must be supplied or fields will be updated to default values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_line_variations_product_line_variation_id_put(product_line_variation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_variation_id: (required)
        :param ProductLineVariationForManipulationDto body:
        :return: ProductLineVariationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_product_line_variations_product_line_variation_id_put_with_http_info(product_line_variation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_product_line_variations_product_line_variation_id_put_with_http_info(product_line_variation_id, **kwargs)  # noqa: E501
            return data

    def api_v1_product_line_variations_product_line_variation_id_put_with_http_info(self, product_line_variation_id, **kwargs):  # noqa: E501
        """Fully update a product line variation. All elements must be supplied or fields will be updated to default values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_line_variations_product_line_variation_id_put_with_http_info(product_line_variation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_variation_id: (required)
        :param ProductLineVariationForManipulationDto body:
        :return: ProductLineVariationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_line_variation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_product_line_variations_product_line_variation_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_line_variation_id' is set
        if ('product_line_variation_id' not in params or
                params['product_line_variation_id'] is None):
            raise ValueError("Missing the required parameter `product_line_variation_id` when calling `api_v1_product_line_variations_product_line_variation_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_line_variation_id' in params:
            path_params['productLineVariationId'] = params['product_line_variation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ProductLineVariations/{productLineVariationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductLineVariationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_product_lines_product_line_id_product_line_variations_post(self, product_line_id, **kwargs):  # noqa: E501
        """Create a new product line variation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_lines_product_line_id_product_line_variations_post(product_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: (required)
        :param ProductLineVariationForManipulationDto body:
        :return: ProductLineVariationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_product_lines_product_line_id_product_line_variations_post_with_http_info(product_line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_product_lines_product_line_id_product_line_variations_post_with_http_info(product_line_id, **kwargs)  # noqa: E501
            return data

    def api_v1_product_lines_product_line_id_product_line_variations_post_with_http_info(self, product_line_id, **kwargs):  # noqa: E501
        """Create a new product line variation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_product_lines_product_line_id_product_line_variations_post_with_http_info(product_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: (required)
        :param ProductLineVariationForManipulationDto body:
        :return: ProductLineVariationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_line_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_product_lines_product_line_id_product_line_variations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_line_id' is set
        if ('product_line_id' not in params or
                params['product_line_id'] is None):
            raise ValueError("Missing the required parameter `product_line_id` when calling `api_v1_product_lines_product_line_id_product_line_variations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_line_id' in params:
            path_params['productLineId'] = params['product_line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ProductLines/{productLineId}/ProductLineVariations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductLineVariationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, **kwargs):  # noqa: E501
        """Returns a list of all variations associated with your company's product lines.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: Limit the returned variations based on a product line
        :param str name: Limit the returned variations based on name
        :param str sku: Limit the returned variations based on SKU
        :param str pack_size: Limit the returned variations based on pack size
        :param str legal_name: Limit the returned variations based on legal name
        :param str language: Limit the returned variations based on language
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[ProductLineVariationDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all variations associated with your company's product lines.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: Limit the returned variations based on a product line
        :param str name: Limit the returned variations based on name
        :param str sku: Limit the returned variations based on SKU
        :param str pack_size: Limit the returned variations based on pack size
        :param str legal_name: Limit the returned variations based on legal name
        :param str language: Limit the returned variations based on language
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[ProductLineVariationDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_line_id', 'name', 'sku', 'pack_size', 'legal_name', 'language', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_line_id' in params:
            query_params.append(('ProductLineId', params['product_line_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('Sku', params['sku']))  # noqa: E501
        if 'pack_size' in params:
            query_params.append(('PackSize', params['pack_size']))  # noqa: E501
        if 'legal_name' in params:
            query_params.append(('LegalName', params['legal_name']))  # noqa: E501
        if 'language' in params:
            query_params.append(('Language', params['language']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ProductLineVariations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductLineVariationDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_by_product_line(self, product_line_id, **kwargs):  # noqa: E501
        """Returns a list of all variations associated with a product line.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_by_product_line(product_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: The product line id (required)
        :param str product_line_id: Limit the returned variations based on a product line
        :param str name: Limit the returned variations based on name
        :param str sku: Limit the returned variations based on SKU
        :param str pack_size: Limit the returned variations based on pack size
        :param str legal_name: Limit the returned variations based on legal name
        :param str language: Limit the returned variations based on language
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[ProductLineVariationDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_by_product_line_with_http_info(product_line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_by_product_line_with_http_info(product_line_id, **kwargs)  # noqa: E501
            return data

    def list_by_product_line_with_http_info(self, product_line_id, **kwargs):  # noqa: E501
        """Returns a list of all variations associated with a product line.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_by_product_line_with_http_info(product_line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_line_id: The product line id (required)
        :param str product_line_id: Limit the returned variations based on a product line
        :param str name: Limit the returned variations based on name
        :param str sku: Limit the returned variations based on SKU
        :param str pack_size: Limit the returned variations based on pack size
        :param str legal_name: Limit the returned variations based on legal name
        :param str language: Limit the returned variations based on language
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[ProductLineVariationDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_line_id', 'product_line_id', 'name', 'sku', 'pack_size', 'legal_name', 'language', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_by_product_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_line_id' is set
        if ('product_line_id' not in params or
                params['product_line_id'] is None):
            raise ValueError("Missing the required parameter `product_line_id` when calling `list_by_product_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_line_id' in params:
            path_params['productLineId'] = params['product_line_id']  # noqa: E501

        query_params = []
        if 'product_line_id' in params:
            query_params.append(('ProductLineId', params['product_line_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('Name', params['name']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('Sku', params['sku']))  # noqa: E501
        if 'pack_size' in params:
            query_params.append(('PackSize', params['pack_size']))  # noqa: E501
        if 'legal_name' in params:
            query_params.append(('LegalName', params['legal_name']))  # noqa: E501
        if 'language' in params:
            query_params.append(('Language', params['language']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/ProductLines/{productLineId}/ProductLineVariations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductLineVariationDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
