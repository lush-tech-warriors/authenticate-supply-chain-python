# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class NotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_site_note(self, supplier_id, site_id, note_id, **kwargs):  # noqa: E501
        """Returns a specified note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_note(supplier_id, site_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :param str note_id: The unique identifier for the note to return (required)
        :return: NoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_note_with_http_info(supplier_id, site_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_note_with_http_info(supplier_id, site_id, note_id, **kwargs)  # noqa: E501
            return data

    def get_site_note_with_http_info(self, supplier_id, site_id, note_id, **kwargs):  # noqa: E501
        """Returns a specified note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_note_with_http_info(supplier_id, site_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :param str note_id: The unique identifier for the note to return (required)
        :return: NoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_site_note`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_site_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/Notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NoteDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_note_count(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all notes for the given supplier and site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_note_count(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_note_count_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_note_count_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
            return data

    def get_site_note_count_with_http_info(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all notes for the given supplier and site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_note_count_with_http_info(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_note_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_site_note_count`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_note_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/Notes/Count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_notes(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all notes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_notes(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :param str title:
        :param ParentTypeEnum type:
        :param str type_id:
        :param str created_by_company_id:
        :param str order_by:
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[NoteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_notes_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_notes_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
            return data

    def get_site_notes_with_http_info(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a list of all notes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_notes_with_http_info(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: (required)
        :param str title:
        :param ParentTypeEnum type:
        :param str type_id:
        :param str created_by_company_id:
        :param str order_by:
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[NoteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id', 'title', 'type', 'type_id', 'created_by_company_id', 'order_by', 'search_query', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_site_notes`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'title' in params:
            query_params.append(('Title', params['title']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'type_id' in params:
            query_params.append(('TypeId', params['type_id']))  # noqa: E501
        if 'created_by_company_id' in params:
            query_params.append(('CreatedByCompanyId', params['created_by_company_id']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}/Notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NoteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_note(self, supplier_id, note_id, **kwargs):  # noqa: E501
        """Returns a specified note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_note(supplier_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str note_id: The unique identifier for the note to return (required)
        :return: NoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_note_with_http_info(supplier_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_note_with_http_info(supplier_id, note_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_note_with_http_info(self, supplier_id, note_id, **kwargs):  # noqa: E501
        """Returns a specified note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_note_with_http_info(supplier_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str note_id: The unique identifier for the note to return (required)
        :return: NoteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_supplier_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `get_supplier_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NoteDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_notes(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all notes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_notes(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str title:
        :param ParentTypeEnum type:
        :param str type_id:
        :param str created_by_company_id:
        :param str order_by:
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[NoteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_notes_with_http_info(supplier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_notes_with_http_info(supplier_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_notes_with_http_info(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all notes meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_notes_with_http_info(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str title:
        :param ParentTypeEnum type:
        :param str type_id:
        :param str created_by_company_id:
        :param str order_by:
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :return: list[NoteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'title', 'type', 'type_id', 'created_by_company_id', 'order_by', 'search_query', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_supplier_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501

        query_params = []
        if 'title' in params:
            query_params.append(('Title', params['title']))  # noqa: E501
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'type_id' in params:
            query_params.append(('TypeId', params['type_id']))  # noqa: E501
        if 'created_by_company_id' in params:
            query_params.append(('CreatedByCompanyId', params['created_by_company_id']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NoteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
