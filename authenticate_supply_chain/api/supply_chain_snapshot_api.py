# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class SupplyChainSnapshotApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def synchronise_supply_chain_snapshots_for_product(self, product_id, **kwargs):  # noqa: E501
        """Update the supply chain using a specific product id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronise_supply_chain_snapshots_for_product(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.synchronise_supply_chain_snapshots_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.synchronise_supply_chain_snapshots_for_product_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def synchronise_supply_chain_snapshots_for_product_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """Update the supply chain using a specific product id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronise_supply_chain_snapshots_for_product_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronise_supply_chain_snapshots_for_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `synchronise_supply_chain_snapshots_for_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplyChainSnapshot/Synchronise/Product/{productId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronise_supply_chain_snapshots_for_product_link(self, product_link_id, **kwargs):  # noqa: E501
        """Update the supply chain using a specific product link id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronise_supply_chain_snapshots_for_product_link(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.synchronise_supply_chain_snapshots_for_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.synchronise_supply_chain_snapshots_for_product_link_with_http_info(product_link_id, **kwargs)  # noqa: E501
            return data

    def synchronise_supply_chain_snapshots_for_product_link_with_http_info(self, product_link_id, **kwargs):  # noqa: E501
        """Update the supply chain using a specific product link id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronise_supply_chain_snapshots_for_product_link_with_http_info(product_link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronise_supply_chain_snapshots_for_product_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_link_id' is set
        if ('product_link_id' not in params or
                params['product_link_id'] is None):
            raise ValueError("Missing the required parameter `product_link_id` when calling `synchronise_supply_chain_snapshots_for_product_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_link_id' in params:
            path_params['productLinkId'] = params['product_link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/SupplyChainSnapshot/Synchronise/ProductLink/{productLinkId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
