# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authenticate_supply_chain.api_client import ApiClient


class SitesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_company_company_id_sites_post(self, company_id, **kwargs):  # noqa: E501
        """Add a new site to a company.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_company_company_id_sites_post(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param SiteDto body:
        :return: SiteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_company_company_id_sites_post_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_company_company_id_sites_post_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def api_v1_company_company_id_sites_post_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Add a new site to a company.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_company_company_id_sites_post_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :param SiteDto body:
        :return: SiteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_company_company_id_sites_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `api_v1_company_company_id_sites_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Company/{companyId}/Sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_company_sites(self, company_id, **kwargs):  # noqa: E501
        """Returns a list of all sites for a company - not using supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company_sites(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_company_sites_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_company_sites_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def get_company_sites_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Returns a list of all sites for a company - not using supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company_sites_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str company_id: (required)
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `get_company_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Company/{companyId}/Sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the site to return (required)
        :return: SiteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_with_http_info(supplier_id, site_id, **kwargs)  # noqa: E501
            return data

    def get_site_with_http_info(self, supplier_id, site_id, **kwargs):  # noqa: E501
        """Returns a specified site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_with_http_info(supplier_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str site_id: The unique identifier for the site to return (required)
        :return: SiteDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_site`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sites(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria - not using the supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :param list[str] function_values:
        :param list[str] status_values:
        :param list[str] risk_values:
        :param list[str] country_ids:
        :param list[str] site_ids:
        :param bool primary_site:
        :param str company_id:
        :param list[str] supplier_codes:
        :param list[str] licence_numbers:
        :param EsgOutcomeEnum esg_assessment_outcome: Filter by ESG Assessment outcome score
        :param EsgStatusEnum esg_assessment_status: Filter by ESG Assessment status score
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sites_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria - not using the supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :param list[str] function_values:
        :param list[str] status_values:
        :param list[str] risk_values:
        :param list[str] country_ids:
        :param list[str] site_ids:
        :param bool primary_site:
        :param str company_id:
        :param list[str] supplier_codes:
        :param list[str] licence_numbers:
        :param EsgOutcomeEnum esg_assessment_outcome: Filter by ESG Assessment outcome score
        :param EsgStatusEnum esg_assessment_status: Filter by ESG Assessment status score
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_query', 'page_number', 'page_size', 'order_by', 'function_values', 'status_values', 'risk_values', 'country_ids', 'site_ids', 'primary_site', 'company_id', 'supplier_codes', 'licence_numbers', 'esg_assessment_outcome', 'esg_assessment_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'function_values' in params:
            query_params.append(('FunctionValues', params['function_values']))  # noqa: E501
            collection_formats['FunctionValues'] = 'multi'  # noqa: E501
        if 'status_values' in params:
            query_params.append(('StatusValues', params['status_values']))  # noqa: E501
            collection_formats['StatusValues'] = 'multi'  # noqa: E501
        if 'risk_values' in params:
            query_params.append(('RiskValues', params['risk_values']))  # noqa: E501
            collection_formats['RiskValues'] = 'multi'  # noqa: E501
        if 'country_ids' in params:
            query_params.append(('CountryIds', params['country_ids']))  # noqa: E501
            collection_formats['CountryIds'] = 'multi'  # noqa: E501
        if 'site_ids' in params:
            query_params.append(('SiteIds', params['site_ids']))  # noqa: E501
            collection_formats['SiteIds'] = 'multi'  # noqa: E501
        if 'primary_site' in params:
            query_params.append(('PrimarySite', params['primary_site']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('CompanyId', params['company_id']))  # noqa: E501
        if 'supplier_codes' in params:
            query_params.append(('SupplierCodes', params['supplier_codes']))  # noqa: E501
            collection_formats['SupplierCodes'] = 'multi'  # noqa: E501
        if 'licence_numbers' in params:
            query_params.append(('LicenceNumbers', params['licence_numbers']))  # noqa: E501
            collection_formats['LicenceNumbers'] = 'multi'  # noqa: E501
        if 'esg_assessment_outcome' in params:
            query_params.append(('ESGAssessmentOutcome', params['esg_assessment_outcome']))  # noqa: E501
        if 'esg_assessment_status' in params:
            query_params.append(('ESGAssessmentStatus', params['esg_assessment_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sites_from_supply_chain(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites_from_supply_chain(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] supplier_tiers:
        :param list[str] category_ids:
        :param list[str] supplier_codes:
        :param SiteSearchTypeEnum search_type:
        :param str search_term:
        :param list[str] function_values:
        :param list[str] status_values:
        :param list[str] risk_values:
        :param list[str] country_ids:
        :param list[str] site_ids:
        :param bool primary_site:
        :param str company_id:
        :param list[str] licence_numbers:
        :param EsgOutcomeEnum esg_assessment_outcome: Filter by ESG Assessment outcome score
        :param EsgStatusEnum esg_assessment_status: Filter by ESG Assessment status score
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sites_from_supply_chain_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sites_from_supply_chain_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sites_from_supply_chain_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites_from_supply_chain_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] supplier_tiers:
        :param list[str] category_ids:
        :param list[str] supplier_codes:
        :param SiteSearchTypeEnum search_type:
        :param str search_term:
        :param list[str] function_values:
        :param list[str] status_values:
        :param list[str] risk_values:
        :param list[str] country_ids:
        :param list[str] site_ids:
        :param bool primary_site:
        :param str company_id:
        :param list[str] licence_numbers:
        :param EsgOutcomeEnum esg_assessment_outcome: Filter by ESG Assessment outcome score
        :param EsgStatusEnum esg_assessment_status: Filter by ESG Assessment status score
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_tiers', 'category_ids', 'supplier_codes', 'search_type', 'search_term', 'function_values', 'status_values', 'risk_values', 'country_ids', 'site_ids', 'primary_site', 'company_id', 'licence_numbers', 'esg_assessment_outcome', 'esg_assessment_status', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sites_from_supply_chain" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'supplier_tiers' in params:
            query_params.append(('SupplierTiers', params['supplier_tiers']))  # noqa: E501
            collection_formats['SupplierTiers'] = 'multi'  # noqa: E501
        if 'category_ids' in params:
            query_params.append(('CategoryIds', params['category_ids']))  # noqa: E501
            collection_formats['CategoryIds'] = 'multi'  # noqa: E501
        if 'supplier_codes' in params:
            query_params.append(('SupplierCodes', params['supplier_codes']))  # noqa: E501
            collection_formats['SupplierCodes'] = 'multi'  # noqa: E501
        if 'search_type' in params:
            query_params.append(('SearchType', params['search_type']))  # noqa: E501
        if 'search_term' in params:
            query_params.append(('SearchTerm', params['search_term']))  # noqa: E501
        if 'function_values' in params:
            query_params.append(('FunctionValues', params['function_values']))  # noqa: E501
            collection_formats['FunctionValues'] = 'multi'  # noqa: E501
        if 'status_values' in params:
            query_params.append(('StatusValues', params['status_values']))  # noqa: E501
            collection_formats['StatusValues'] = 'multi'  # noqa: E501
        if 'risk_values' in params:
            query_params.append(('RiskValues', params['risk_values']))  # noqa: E501
            collection_formats['RiskValues'] = 'multi'  # noqa: E501
        if 'country_ids' in params:
            query_params.append(('CountryIds', params['country_ids']))  # noqa: E501
            collection_formats['CountryIds'] = 'multi'  # noqa: E501
        if 'site_ids' in params:
            query_params.append(('SiteIds', params['site_ids']))  # noqa: E501
            collection_formats['SiteIds'] = 'multi'  # noqa: E501
        if 'primary_site' in params:
            query_params.append(('PrimarySite', params['primary_site']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('CompanyId', params['company_id']))  # noqa: E501
        if 'licence_numbers' in params:
            query_params.append(('LicenceNumbers', params['licence_numbers']))  # noqa: E501
            collection_formats['LicenceNumbers'] = 'multi'  # noqa: E501
        if 'esg_assessment_outcome' in params:
            query_params.append(('ESGAssessmentOutcome', params['esg_assessment_outcome']))  # noqa: E501
        if 'esg_assessment_status' in params:
            query_params.append(('ESGAssessmentStatus', params['esg_assessment_status']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/Sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supplier_sites(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_sites(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str supplier_code: Filter by the site code you have assigned
        :param str country: Filter site by country
        :param str postcode: Filter site by postcode
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supplier_sites_with_http_info(supplier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supplier_sites_with_http_info(supplier_id, **kwargs)  # noqa: E501
            return data

    def get_supplier_sites_with_http_info(self, supplier_id, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supplier_sites_with_http_info(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supplier_id: (required)
        :param str supplier_code: Filter by the site code you have assigned
        :param str country: Filter site by country
        :param str postcode: Filter site by postcode
        :param str search_query:
        :param int page_number:
        :param int page_size:
        :param str order_by:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'supplier_code', 'country', 'postcode', 'search_query', 'page_number', 'page_size', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_supplier_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501

        query_params = []
        if 'supplier_code' in params:
            query_params.append(('SupplierCode', params['supplier_code']))  # noqa: E501
        if 'country' in params:
            query_params.append(('Country', params['country']))  # noqa: E501
        if 'postcode' in params:
            query_params.append(('Postcode', params['postcode']))  # noqa: E501
        if 'search_query' in params:
            query_params.append(('SearchQuery', params['search_query']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('PageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/{supplierId}/Sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_sites(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria - not using the supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteResourceParametersExtended body:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_sites_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria - not using the supply chain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteResourceParametersExtended body:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Sites/Search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_sites_from_supply_chain(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sites_from_supply_chain(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteSupplyChainResourceParameters body:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_sites_from_supply_chain_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_sites_from_supply_chain_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_sites_from_supply_chain_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all sites meeting the request criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sites_from_supply_chain_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteSupplyChainResourceParameters body:
        :return: list[SiteDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_sites_from_supply_chain" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Suppliers/Sites/Search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
