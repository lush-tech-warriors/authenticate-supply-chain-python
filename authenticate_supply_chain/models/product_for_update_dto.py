# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductForUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_fk': 'str',
        'reference_code': 'str',
        'name': 'str',
        'sites': 'list[ProductSiteForManipulationDto]',
        'share_declared_countries': 'bool',
        'not_mapped_reason': 'NotMappingProductLineReasonEnum'
    }

    attribute_map = {
        'category_fk': 'categoryFk',
        'reference_code': 'referenceCode',
        'name': 'name',
        'sites': 'sites',
        'share_declared_countries': 'shareDeclaredCountries',
        'not_mapped_reason': 'notMappedReason'
    }

    def __init__(self, category_fk=None, reference_code=None, name=None, sites=None, share_declared_countries=None, not_mapped_reason=None):  # noqa: E501
        """ProductForUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._category_fk = None
        self._reference_code = None
        self._name = None
        self._sites = None
        self._share_declared_countries = None
        self._not_mapped_reason = None
        self.discriminator = None
        self.category_fk = category_fk
        self.reference_code = reference_code
        self.name = name
        if sites is not None:
            self.sites = sites
        if share_declared_countries is not None:
            self.share_declared_countries = share_declared_countries
        if not_mapped_reason is not None:
            self.not_mapped_reason = not_mapped_reason

    @property
    def category_fk(self):
        """Gets the category_fk of this ProductForUpdateDto.  # noqa: E501

        The unique identifier for the category in which the product will be stored  # noqa: E501

        :return: The category_fk of this ProductForUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._category_fk

    @category_fk.setter
    def category_fk(self, category_fk):
        """Sets the category_fk of this ProductForUpdateDto.

        The unique identifier for the category in which the product will be stored  # noqa: E501

        :param category_fk: The category_fk of this ProductForUpdateDto.  # noqa: E501
        :type: str
        """
        if category_fk is None:
            raise ValueError("Invalid value for `category_fk`, must not be `None`")  # noqa: E501

        self._category_fk = category_fk

    @property
    def reference_code(self):
        """Gets the reference_code of this ProductForUpdateDto.  # noqa: E501

        The product reference code  # noqa: E501

        :return: The reference_code of this ProductForUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._reference_code

    @reference_code.setter
    def reference_code(self, reference_code):
        """Sets the reference_code of this ProductForUpdateDto.

        The product reference code  # noqa: E501

        :param reference_code: The reference_code of this ProductForUpdateDto.  # noqa: E501
        :type: str
        """
        if reference_code is None:
            raise ValueError("Invalid value for `reference_code`, must not be `None`")  # noqa: E501

        self._reference_code = reference_code

    @property
    def name(self):
        """Gets the name of this ProductForUpdateDto.  # noqa: E501

        The product name  # noqa: E501

        :return: The name of this ProductForUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductForUpdateDto.

        The product name  # noqa: E501

        :param name: The name of this ProductForUpdateDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sites(self):
        """Gets the sites of this ProductForUpdateDto.  # noqa: E501

        The sites from which the product is supplied    If a list of sites is not provided. The product will be associated with all of your    sites on platform  # noqa: E501

        :return: The sites of this ProductForUpdateDto.  # noqa: E501
        :rtype: list[ProductSiteForManipulationDto]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this ProductForUpdateDto.

        The sites from which the product is supplied    If a list of sites is not provided. The product will be associated with all of your    sites on platform  # noqa: E501

        :param sites: The sites of this ProductForUpdateDto.  # noqa: E501
        :type: list[ProductSiteForManipulationDto]
        """

        self._sites = sites

    @property
    def share_declared_countries(self):
        """Gets the share_declared_countries of this ProductForUpdateDto.  # noqa: E501

        If any countries are declared on this product, allow customers to see the declaration  # noqa: E501

        :return: The share_declared_countries of this ProductForUpdateDto.  # noqa: E501
        :rtype: bool
        """
        return self._share_declared_countries

    @share_declared_countries.setter
    def share_declared_countries(self, share_declared_countries):
        """Sets the share_declared_countries of this ProductForUpdateDto.

        If any countries are declared on this product, allow customers to see the declaration  # noqa: E501

        :param share_declared_countries: The share_declared_countries of this ProductForUpdateDto.  # noqa: E501
        :type: bool
        """

        self._share_declared_countries = share_declared_countries

    @property
    def not_mapped_reason(self):
        """Gets the not_mapped_reason of this ProductForUpdateDto.  # noqa: E501


        :return: The not_mapped_reason of this ProductForUpdateDto.  # noqa: E501
        :rtype: NotMappingProductLineReasonEnum
        """
        return self._not_mapped_reason

    @not_mapped_reason.setter
    def not_mapped_reason(self, not_mapped_reason):
        """Sets the not_mapped_reason of this ProductForUpdateDto.


        :param not_mapped_reason: The not_mapped_reason of this ProductForUpdateDto.  # noqa: E501
        :type: NotMappingProductLineReasonEnum
        """

        self._not_mapped_reason = not_mapped_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductForUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductForUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
