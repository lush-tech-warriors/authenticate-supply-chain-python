# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'job_title': 'JobTitleEnum',
        'job_title_display_name': 'str',
        'roles': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'job_title': 'jobTitle',
        'job_title_display_name': 'jobTitleDisplayName',
        'roles': 'roles'
    }

    def __init__(self, id=None, first_name=None, last_name=None, job_title=None, job_title_display_name=None, roles=None):  # noqa: E501
        """UserDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._job_title = None
        self._job_title_display_name = None
        self._roles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if job_title is not None:
            self.job_title = job_title
        if job_title_display_name is not None:
            self.job_title_display_name = job_title_display_name
        if roles is not None:
            self.roles = roles

    @property
    def id(self):
        """Gets the id of this UserDto.  # noqa: E501

        The unique identifier of the contact within the Authenticate platform  # noqa: E501

        :return: The id of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDto.

        The unique identifier of the contact within the Authenticate platform  # noqa: E501

        :param id: The id of this UserDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this UserDto.  # noqa: E501

        The contact's first name  # noqa: E501

        :return: The first_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDto.

        The contact's first name  # noqa: E501

        :param first_name: The first_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDto.  # noqa: E501

        The contact's last name  # noqa: E501

        :return: The last_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDto.

        The contact's last name  # noqa: E501

        :param last_name: The last_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def job_title(self):
        """Gets the job_title of this UserDto.  # noqa: E501


        :return: The job_title of this UserDto.  # noqa: E501
        :rtype: JobTitleEnum
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this UserDto.


        :param job_title: The job_title of this UserDto.  # noqa: E501
        :type: JobTitleEnum
        """

        self._job_title = job_title

    @property
    def job_title_display_name(self):
        """Gets the job_title_display_name of this UserDto.  # noqa: E501


        :return: The job_title_display_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._job_title_display_name

    @job_title_display_name.setter
    def job_title_display_name(self, job_title_display_name):
        """Sets the job_title_display_name of this UserDto.


        :param job_title_display_name: The job_title_display_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._job_title_display_name = job_title_display_name

    @property
    def roles(self):
        """Gets the roles of this UserDto.  # noqa: E501

        A list of system roles this user is associated with  # noqa: E501

        :return: The roles of this UserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserDto.

        A list of system roles this user is associated with  # noqa: E501

        :param roles: The roles of this UserDto.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
