# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMaterialResourceParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_query': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'order_by': 'str',
        'raw_material_ids': 'list[str]',
        'supplier_id': 'str'
    }

    attribute_map = {
        'search_query': 'searchQuery',
        'page_number': 'pageNumber',
        'page_size': 'pageSize',
        'order_by': 'orderBy',
        'raw_material_ids': 'rawMaterialIds',
        'supplier_id': 'supplierId'
    }

    def __init__(self, search_query=None, page_number=None, page_size=None, order_by=None, raw_material_ids=None, supplier_id=None):  # noqa: E501
        """RawMaterialResourceParameters - a model defined in Swagger"""  # noqa: E501
        self._search_query = None
        self._page_number = None
        self._page_size = None
        self._order_by = None
        self._raw_material_ids = None
        self._supplier_id = None
        self.discriminator = None
        if search_query is not None:
            self.search_query = search_query
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if order_by is not None:
            self.order_by = order_by
        if raw_material_ids is not None:
            self.raw_material_ids = raw_material_ids
        if supplier_id is not None:
            self.supplier_id = supplier_id

    @property
    def search_query(self):
        """Gets the search_query of this RawMaterialResourceParameters.  # noqa: E501


        :return: The search_query of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this RawMaterialResourceParameters.


        :param search_query: The search_query of this RawMaterialResourceParameters.  # noqa: E501
        :type: str
        """

        self._search_query = search_query

    @property
    def page_number(self):
        """Gets the page_number of this RawMaterialResourceParameters.  # noqa: E501


        :return: The page_number of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this RawMaterialResourceParameters.


        :param page_number: The page_number of this RawMaterialResourceParameters.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this RawMaterialResourceParameters.  # noqa: E501


        :return: The page_size of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this RawMaterialResourceParameters.


        :param page_size: The page_size of this RawMaterialResourceParameters.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def order_by(self):
        """Gets the order_by of this RawMaterialResourceParameters.  # noqa: E501


        :return: The order_by of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this RawMaterialResourceParameters.


        :param order_by: The order_by of this RawMaterialResourceParameters.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def raw_material_ids(self):
        """Gets the raw_material_ids of this RawMaterialResourceParameters.  # noqa: E501


        :return: The raw_material_ids of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._raw_material_ids

    @raw_material_ids.setter
    def raw_material_ids(self, raw_material_ids):
        """Sets the raw_material_ids of this RawMaterialResourceParameters.


        :param raw_material_ids: The raw_material_ids of this RawMaterialResourceParameters.  # noqa: E501
        :type: list[str]
        """

        self._raw_material_ids = raw_material_ids

    @property
    def supplier_id(self):
        """Gets the supplier_id of this RawMaterialResourceParameters.  # noqa: E501


        :return: The supplier_id of this RawMaterialResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this RawMaterialResourceParameters.


        :param supplier_id: The supplier_id of this RawMaterialResourceParameters.  # noqa: E501
        :type: str
        """

        self._supplier_id = supplier_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMaterialResourceParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMaterialResourceParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
