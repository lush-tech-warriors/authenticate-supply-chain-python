# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMaterialLogisticForCreationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'site_ids': 'list[str]',
        'logistics_type': 'RawMaterialLogisticsTypeEnum',
        'contracted_by_company_id': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'site_ids': 'siteIds',
        'logistics_type': 'logisticsType',
        'contracted_by_company_id': 'contractedByCompanyId'
    }

    def __init__(self, company_id=None, site_ids=None, logistics_type=None, contracted_by_company_id=None):  # noqa: E501
        """RawMaterialLogisticForCreationDto - a model defined in Swagger"""  # noqa: E501
        self._company_id = None
        self._site_ids = None
        self._logistics_type = None
        self._contracted_by_company_id = None
        self.discriminator = None
        if company_id is not None:
            self.company_id = company_id
        if site_ids is not None:
            self.site_ids = site_ids
        self.logistics_type = logistics_type
        self.contracted_by_company_id = contracted_by_company_id

    @property
    def company_id(self):
        """Gets the company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501

        The unique identifier of the company providing the logistic  # noqa: E501

        :return: The company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this RawMaterialLogisticForCreationDto.

        The unique identifier of the company providing the logistic  # noqa: E501

        :param company_id: The company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def site_ids(self):
        """Gets the site_ids of this RawMaterialLogisticForCreationDto.  # noqa: E501

        The unique identifier of specific site(s) providing the logistic  # noqa: E501

        :return: The site_ids of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._site_ids

    @site_ids.setter
    def site_ids(self, site_ids):
        """Sets the site_ids of this RawMaterialLogisticForCreationDto.

        The unique identifier of specific site(s) providing the logistic  # noqa: E501

        :param site_ids: The site_ids of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :type: list[str]
        """

        self._site_ids = site_ids

    @property
    def logistics_type(self):
        """Gets the logistics_type of this RawMaterialLogisticForCreationDto.  # noqa: E501


        :return: The logistics_type of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :rtype: RawMaterialLogisticsTypeEnum
        """
        return self._logistics_type

    @logistics_type.setter
    def logistics_type(self, logistics_type):
        """Sets the logistics_type of this RawMaterialLogisticForCreationDto.


        :param logistics_type: The logistics_type of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :type: RawMaterialLogisticsTypeEnum
        """
        if logistics_type is None:
            raise ValueError("Invalid value for `logistics_type`, must not be `None`")  # noqa: E501

        self._logistics_type = logistics_type

    @property
    def contracted_by_company_id(self):
        """Gets the contracted_by_company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501

        The unique identifier of the contracted company  # noqa: E501

        :return: The contracted_by_company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._contracted_by_company_id

    @contracted_by_company_id.setter
    def contracted_by_company_id(self, contracted_by_company_id):
        """Sets the contracted_by_company_id of this RawMaterialLogisticForCreationDto.

        The unique identifier of the contracted company  # noqa: E501

        :param contracted_by_company_id: The contracted_by_company_id of this RawMaterialLogisticForCreationDto.  # noqa: E501
        :type: str
        """
        if contracted_by_company_id is None:
            raise ValueError("Invalid value for `contracted_by_company_id`, must not be `None`")  # noqa: E501

        self._contracted_by_company_id = contracted_by_company_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMaterialLogisticForCreationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMaterialLogisticForCreationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
