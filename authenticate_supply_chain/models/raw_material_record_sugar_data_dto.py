# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMaterialRecordSugarDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mill_code': 'str',
        'total_quantity_covered_by_bonsucro_certification': 'str',
        'total_quantity_covered_by_proterra_certification': 'str',
        'total_quantity_covered_by_fairtrade': 'str',
        'total_quantity_mt_tq_sai': 'str',
        'total_quantity_chain_of_custody': 'str',
        'vessel_name': 'str',
        'fiscal_year': 'str',
        'destination': 'str',
        'market': 'str',
        'trading_entity_name': 'str',
        'supplier_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mill_code': 'millCode',
        'total_quantity_covered_by_bonsucro_certification': 'totalQuantityCoveredByBonsucroCertification',
        'total_quantity_covered_by_proterra_certification': 'totalQuantityCoveredByProterraCertification',
        'total_quantity_covered_by_fairtrade': 'totalQuantityCoveredByFairtrade',
        'total_quantity_mt_tq_sai': 'totalQuantityMtTqSai',
        'total_quantity_chain_of_custody': 'totalQuantityChainOfCustody',
        'vessel_name': 'vesselName',
        'fiscal_year': 'fiscalYear',
        'destination': 'destination',
        'market': 'market',
        'trading_entity_name': 'tradingEntityName',
        'supplier_code': 'supplierCode'
    }

    def __init__(self, id=None, mill_code=None, total_quantity_covered_by_bonsucro_certification=None, total_quantity_covered_by_proterra_certification=None, total_quantity_covered_by_fairtrade=None, total_quantity_mt_tq_sai=None, total_quantity_chain_of_custody=None, vessel_name=None, fiscal_year=None, destination=None, market=None, trading_entity_name=None, supplier_code=None):  # noqa: E501
        """RawMaterialRecordSugarDataDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._mill_code = None
        self._total_quantity_covered_by_bonsucro_certification = None
        self._total_quantity_covered_by_proterra_certification = None
        self._total_quantity_covered_by_fairtrade = None
        self._total_quantity_mt_tq_sai = None
        self._total_quantity_chain_of_custody = None
        self._vessel_name = None
        self._fiscal_year = None
        self._destination = None
        self._market = None
        self._trading_entity_name = None
        self._supplier_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if mill_code is not None:
            self.mill_code = mill_code
        if total_quantity_covered_by_bonsucro_certification is not None:
            self.total_quantity_covered_by_bonsucro_certification = total_quantity_covered_by_bonsucro_certification
        if total_quantity_covered_by_proterra_certification is not None:
            self.total_quantity_covered_by_proterra_certification = total_quantity_covered_by_proterra_certification
        if total_quantity_covered_by_fairtrade is not None:
            self.total_quantity_covered_by_fairtrade = total_quantity_covered_by_fairtrade
        if total_quantity_mt_tq_sai is not None:
            self.total_quantity_mt_tq_sai = total_quantity_mt_tq_sai
        if total_quantity_chain_of_custody is not None:
            self.total_quantity_chain_of_custody = total_quantity_chain_of_custody
        if vessel_name is not None:
            self.vessel_name = vessel_name
        if fiscal_year is not None:
            self.fiscal_year = fiscal_year
        if destination is not None:
            self.destination = destination
        if market is not None:
            self.market = market
        if trading_entity_name is not None:
            self.trading_entity_name = trading_entity_name
        if supplier_code is not None:
            self.supplier_code = supplier_code

    @property
    def id(self):
        """Gets the id of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The id of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RawMaterialRecordSugarDataDto.


        :param id: The id of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mill_code(self):
        """Gets the mill_code of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The mill_code of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._mill_code

    @mill_code.setter
    def mill_code(self, mill_code):
        """Sets the mill_code of this RawMaterialRecordSugarDataDto.


        :param mill_code: The mill_code of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._mill_code = mill_code

    @property
    def total_quantity_covered_by_bonsucro_certification(self):
        """Gets the total_quantity_covered_by_bonsucro_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The total_quantity_covered_by_bonsucro_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity_covered_by_bonsucro_certification

    @total_quantity_covered_by_bonsucro_certification.setter
    def total_quantity_covered_by_bonsucro_certification(self, total_quantity_covered_by_bonsucro_certification):
        """Sets the total_quantity_covered_by_bonsucro_certification of this RawMaterialRecordSugarDataDto.


        :param total_quantity_covered_by_bonsucro_certification: The total_quantity_covered_by_bonsucro_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._total_quantity_covered_by_bonsucro_certification = total_quantity_covered_by_bonsucro_certification

    @property
    def total_quantity_covered_by_proterra_certification(self):
        """Gets the total_quantity_covered_by_proterra_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The total_quantity_covered_by_proterra_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity_covered_by_proterra_certification

    @total_quantity_covered_by_proterra_certification.setter
    def total_quantity_covered_by_proterra_certification(self, total_quantity_covered_by_proterra_certification):
        """Sets the total_quantity_covered_by_proterra_certification of this RawMaterialRecordSugarDataDto.


        :param total_quantity_covered_by_proterra_certification: The total_quantity_covered_by_proterra_certification of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._total_quantity_covered_by_proterra_certification = total_quantity_covered_by_proterra_certification

    @property
    def total_quantity_covered_by_fairtrade(self):
        """Gets the total_quantity_covered_by_fairtrade of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The total_quantity_covered_by_fairtrade of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity_covered_by_fairtrade

    @total_quantity_covered_by_fairtrade.setter
    def total_quantity_covered_by_fairtrade(self, total_quantity_covered_by_fairtrade):
        """Sets the total_quantity_covered_by_fairtrade of this RawMaterialRecordSugarDataDto.


        :param total_quantity_covered_by_fairtrade: The total_quantity_covered_by_fairtrade of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._total_quantity_covered_by_fairtrade = total_quantity_covered_by_fairtrade

    @property
    def total_quantity_mt_tq_sai(self):
        """Gets the total_quantity_mt_tq_sai of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The total_quantity_mt_tq_sai of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity_mt_tq_sai

    @total_quantity_mt_tq_sai.setter
    def total_quantity_mt_tq_sai(self, total_quantity_mt_tq_sai):
        """Sets the total_quantity_mt_tq_sai of this RawMaterialRecordSugarDataDto.


        :param total_quantity_mt_tq_sai: The total_quantity_mt_tq_sai of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._total_quantity_mt_tq_sai = total_quantity_mt_tq_sai

    @property
    def total_quantity_chain_of_custody(self):
        """Gets the total_quantity_chain_of_custody of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The total_quantity_chain_of_custody of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._total_quantity_chain_of_custody

    @total_quantity_chain_of_custody.setter
    def total_quantity_chain_of_custody(self, total_quantity_chain_of_custody):
        """Sets the total_quantity_chain_of_custody of this RawMaterialRecordSugarDataDto.


        :param total_quantity_chain_of_custody: The total_quantity_chain_of_custody of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._total_quantity_chain_of_custody = total_quantity_chain_of_custody

    @property
    def vessel_name(self):
        """Gets the vessel_name of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The vessel_name of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._vessel_name

    @vessel_name.setter
    def vessel_name(self, vessel_name):
        """Sets the vessel_name of this RawMaterialRecordSugarDataDto.


        :param vessel_name: The vessel_name of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._vessel_name = vessel_name

    @property
    def fiscal_year(self):
        """Gets the fiscal_year of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The fiscal_year of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, fiscal_year):
        """Sets the fiscal_year of this RawMaterialRecordSugarDataDto.


        :param fiscal_year: The fiscal_year of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._fiscal_year = fiscal_year

    @property
    def destination(self):
        """Gets the destination of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The destination of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RawMaterialRecordSugarDataDto.


        :param destination: The destination of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def market(self):
        """Gets the market of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The market of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this RawMaterialRecordSugarDataDto.


        :param market: The market of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def trading_entity_name(self):
        """Gets the trading_entity_name of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The trading_entity_name of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._trading_entity_name

    @trading_entity_name.setter
    def trading_entity_name(self, trading_entity_name):
        """Sets the trading_entity_name of this RawMaterialRecordSugarDataDto.


        :param trading_entity_name: The trading_entity_name of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._trading_entity_name = trading_entity_name

    @property
    def supplier_code(self):
        """Gets the supplier_code of this RawMaterialRecordSugarDataDto.  # noqa: E501


        :return: The supplier_code of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :rtype: str
        """
        return self._supplier_code

    @supplier_code.setter
    def supplier_code(self, supplier_code):
        """Sets the supplier_code of this RawMaterialRecordSugarDataDto.


        :param supplier_code: The supplier_code of this RawMaterialRecordSugarDataDto.  # noqa: E501
        :type: str
        """

        self._supplier_code = supplier_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMaterialRecordSugarDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMaterialRecordSugarDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
