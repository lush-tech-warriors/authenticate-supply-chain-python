# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CountryEsgSummaryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'country_id': 'str',
        'country_name': 'str',
        'score': 'float',
        'risk_points': 'int',
        'rank': 'int',
        'maximum_risk_points': 'int',
        'risk_classification': 'str',
        'risk_classification_value': 'int',
        'last_updated_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'country_id': 'countryId',
        'country_name': 'countryName',
        'score': 'score',
        'risk_points': 'riskPoints',
        'rank': 'rank',
        'maximum_risk_points': 'maximumRiskPoints',
        'risk_classification': 'riskClassification',
        'risk_classification_value': 'riskClassificationValue',
        'last_updated_date': 'lastUpdatedDate'
    }

    def __init__(self, id=None, country_id=None, country_name=None, score=None, risk_points=None, rank=None, maximum_risk_points=None, risk_classification=None, risk_classification_value=None, last_updated_date=None):  # noqa: E501
        """CountryEsgSummaryDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._country_id = None
        self._country_name = None
        self._score = None
        self._risk_points = None
        self._rank = None
        self._maximum_risk_points = None
        self._risk_classification = None
        self._risk_classification_value = None
        self._last_updated_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if country_id is not None:
            self.country_id = country_id
        if country_name is not None:
            self.country_name = country_name
        if score is not None:
            self.score = score
        if risk_points is not None:
            self.risk_points = risk_points
        if rank is not None:
            self.rank = rank
        if maximum_risk_points is not None:
            self.maximum_risk_points = maximum_risk_points
        if risk_classification is not None:
            self.risk_classification = risk_classification
        if risk_classification_value is not None:
            self.risk_classification_value = risk_classification_value
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date

    @property
    def id(self):
        """Gets the id of this CountryEsgSummaryDto.  # noqa: E501

        Country Esg summary Id.  # noqa: E501

        :return: The id of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CountryEsgSummaryDto.

        Country Esg summary Id.  # noqa: E501

        :param id: The id of this CountryEsgSummaryDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def country_id(self):
        """Gets the country_id of this CountryEsgSummaryDto.  # noqa: E501

        Unique identifier of the country the esg summary is associated with.  # noqa: E501

        :return: The country_id of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CountryEsgSummaryDto.

        Unique identifier of the country the esg summary is associated with.  # noqa: E501

        :param country_id: The country_id of this CountryEsgSummaryDto.  # noqa: E501
        :type: str
        """

        self._country_id = country_id

    @property
    def country_name(self):
        """Gets the country_name of this CountryEsgSummaryDto.  # noqa: E501

        Name of the country the esg summary is associated with.  # noqa: E501

        :return: The country_name of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CountryEsgSummaryDto.

        Name of the country the esg summary is associated with.  # noqa: E501

        :param country_name: The country_name of this CountryEsgSummaryDto.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def score(self):
        """Gets the score of this CountryEsgSummaryDto.  # noqa: E501

        Country Esg score.  # noqa: E501

        :return: The score of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CountryEsgSummaryDto.

        Country Esg score.  # noqa: E501

        :param score: The score of this CountryEsgSummaryDto.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def risk_points(self):
        """Gets the risk_points of this CountryEsgSummaryDto.  # noqa: E501

        The number of Risk points assigned to the country.  # noqa: E501

        :return: The risk_points of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_points

    @risk_points.setter
    def risk_points(self, risk_points):
        """Sets the risk_points of this CountryEsgSummaryDto.

        The number of Risk points assigned to the country.  # noqa: E501

        :param risk_points: The risk_points of this CountryEsgSummaryDto.  # noqa: E501
        :type: int
        """

        self._risk_points = risk_points

    @property
    def rank(self):
        """Gets the rank of this CountryEsgSummaryDto.  # noqa: E501

        The global ranking of the country.  # noqa: E501

        :return: The rank of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this CountryEsgSummaryDto.

        The global ranking of the country.  # noqa: E501

        :param rank: The rank of this CountryEsgSummaryDto.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def maximum_risk_points(self):
        """Gets the maximum_risk_points of this CountryEsgSummaryDto.  # noqa: E501

        The maximum number of risk points available to the country.  # noqa: E501

        :return: The maximum_risk_points of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._maximum_risk_points

    @maximum_risk_points.setter
    def maximum_risk_points(self, maximum_risk_points):
        """Sets the maximum_risk_points of this CountryEsgSummaryDto.

        The maximum number of risk points available to the country.  # noqa: E501

        :param maximum_risk_points: The maximum_risk_points of this CountryEsgSummaryDto.  # noqa: E501
        :type: int
        """

        self._maximum_risk_points = maximum_risk_points

    @property
    def risk_classification(self):
        """Gets the risk_classification of this CountryEsgSummaryDto.  # noqa: E501

        The risk classification text.  # noqa: E501

        :return: The risk_classification of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: str
        """
        return self._risk_classification

    @risk_classification.setter
    def risk_classification(self, risk_classification):
        """Sets the risk_classification of this CountryEsgSummaryDto.

        The risk classification text.  # noqa: E501

        :param risk_classification: The risk_classification of this CountryEsgSummaryDto.  # noqa: E501
        :type: str
        """

        self._risk_classification = risk_classification

    @property
    def risk_classification_value(self):
        """Gets the risk_classification_value of this CountryEsgSummaryDto.  # noqa: E501

        The risk classification number.  # noqa: E501

        :return: The risk_classification_value of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_classification_value

    @risk_classification_value.setter
    def risk_classification_value(self, risk_classification_value):
        """Sets the risk_classification_value of this CountryEsgSummaryDto.

        The risk classification number.  # noqa: E501

        :param risk_classification_value: The risk_classification_value of this CountryEsgSummaryDto.  # noqa: E501
        :type: int
        """

        self._risk_classification_value = risk_classification_value

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this CountryEsgSummaryDto.  # noqa: E501

        Time stamp of when the summary was last updated.  # noqa: E501

        :return: The last_updated_date of this CountryEsgSummaryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this CountryEsgSummaryDto.

        Time stamp of when the summary was last updated.  # noqa: E501

        :param last_updated_date: The last_updated_date of this CountryEsgSummaryDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountryEsgSummaryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryEsgSummaryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
