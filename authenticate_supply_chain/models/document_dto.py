# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'filename': 'str',
        'mime_type': 'str',
        'size': 'int',
        'resource': 'str',
        'external_provider_reference': 'str'
    }

    attribute_map = {
        'id': 'id',
        'filename': 'filename',
        'mime_type': 'mimeType',
        'size': 'size',
        'resource': 'resource',
        'external_provider_reference': 'externalProviderReference'
    }

    def __init__(self, id=None, filename=None, mime_type=None, size=None, resource=None, external_provider_reference=None):  # noqa: E501
        """DocumentDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._filename = None
        self._mime_type = None
        self._size = None
        self._resource = None
        self._external_provider_reference = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if filename is not None:
            self.filename = filename
        if mime_type is not None:
            self.mime_type = mime_type
        if size is not None:
            self.size = size
        if resource is not None:
            self.resource = resource
        if external_provider_reference is not None:
            self.external_provider_reference = external_provider_reference

    @property
    def id(self):
        """Gets the id of this DocumentDto.  # noqa: E501

        The unique identifier for the Document in the Authenticate platform  # noqa: E501

        :return: The id of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentDto.

        The unique identifier for the Document in the Authenticate platform  # noqa: E501

        :param id: The id of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this DocumentDto.  # noqa: E501

        The filename for the document  # noqa: E501

        :return: The filename of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentDto.

        The filename for the document  # noqa: E501

        :param filename: The filename of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def mime_type(self):
        """Gets the mime_type of this DocumentDto.  # noqa: E501

        The document mime type  # noqa: E501

        :return: The mime_type of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DocumentDto.

        The document mime type  # noqa: E501

        :param mime_type: The mime_type of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def size(self):
        """Gets the size of this DocumentDto.  # noqa: E501

        The document size  # noqa: E501

        :return: The size of this DocumentDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DocumentDto.

        The document size  # noqa: E501

        :param size: The size of this DocumentDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def resource(self):
        """Gets the resource of this DocumentDto.  # noqa: E501

        A convenience link to the resource in the API to download the attachment  # noqa: E501

        :return: The resource of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this DocumentDto.

        A convenience link to the resource in the API to download the attachment  # noqa: E501

        :param resource: The resource of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def external_provider_reference(self):
        """Gets the external_provider_reference of this DocumentDto.  # noqa: E501

        The external provider reference for the document  # noqa: E501

        :return: The external_provider_reference of this DocumentDto.  # noqa: E501
        :rtype: str
        """
        return self._external_provider_reference

    @external_provider_reference.setter
    def external_provider_reference(self, external_provider_reference):
        """Sets the external_provider_reference of this DocumentDto.

        The external provider reference for the document  # noqa: E501

        :param external_provider_reference: The external_provider_reference of this DocumentDto.  # noqa: E501
        :type: str
        """

        self._external_provider_reference = external_provider_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
