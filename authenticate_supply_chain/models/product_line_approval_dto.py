# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineApprovalDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product_line_id': 'str',
        'utc_created_date': 'datetime',
        'utc_approver_response_date': 'datetime',
        'response': 'ProductLineApprovalRequestResponseEnum',
        'response_reason': 'str'
    }

    attribute_map = {
        'id': 'id',
        'product_line_id': 'productLineId',
        'utc_created_date': 'utcCreatedDate',
        'utc_approver_response_date': 'utcApproverResponseDate',
        'response': 'response',
        'response_reason': 'responseReason'
    }

    def __init__(self, id=None, product_line_id=None, utc_created_date=None, utc_approver_response_date=None, response=None, response_reason=None):  # noqa: E501
        """ProductLineApprovalDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_line_id = None
        self._utc_created_date = None
        self._utc_approver_response_date = None
        self._response = None
        self._response_reason = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.product_line_id = product_line_id
        if utc_created_date is not None:
            self.utc_created_date = utc_created_date
        if utc_approver_response_date is not None:
            self.utc_approver_response_date = utc_approver_response_date
        if response is not None:
            self.response = response
        if response_reason is not None:
            self.response_reason = response_reason

    @property
    def id(self):
        """Gets the id of this ProductLineApprovalDto.  # noqa: E501

        The identifier of this product line approval record  # noqa: E501

        :return: The id of this ProductLineApprovalDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLineApprovalDto.

        The identifier of this product line approval record  # noqa: E501

        :param id: The id of this ProductLineApprovalDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product_line_id(self):
        """Gets the product_line_id of this ProductLineApprovalDto.  # noqa: E501

        The identifier of the product line / inventory item  # noqa: E501

        :return: The product_line_id of this ProductLineApprovalDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line_id

    @product_line_id.setter
    def product_line_id(self, product_line_id):
        """Sets the product_line_id of this ProductLineApprovalDto.

        The identifier of the product line / inventory item  # noqa: E501

        :param product_line_id: The product_line_id of this ProductLineApprovalDto.  # noqa: E501
        :type: str
        """
        if product_line_id is None:
            raise ValueError("Invalid value for `product_line_id`, must not be `None`")  # noqa: E501

        self._product_line_id = product_line_id

    @property
    def utc_created_date(self):
        """Gets the utc_created_date of this ProductLineApprovalDto.  # noqa: E501

        The date of the approval  # noqa: E501

        :return: The utc_created_date of this ProductLineApprovalDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_created_date

    @utc_created_date.setter
    def utc_created_date(self, utc_created_date):
        """Sets the utc_created_date of this ProductLineApprovalDto.

        The date of the approval  # noqa: E501

        :param utc_created_date: The utc_created_date of this ProductLineApprovalDto.  # noqa: E501
        :type: datetime
        """

        self._utc_created_date = utc_created_date

    @property
    def utc_approver_response_date(self):
        """Gets the utc_approver_response_date of this ProductLineApprovalDto.  # noqa: E501

        The date the approver responded  # noqa: E501

        :return: The utc_approver_response_date of this ProductLineApprovalDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_approver_response_date

    @utc_approver_response_date.setter
    def utc_approver_response_date(self, utc_approver_response_date):
        """Sets the utc_approver_response_date of this ProductLineApprovalDto.

        The date the approver responded  # noqa: E501

        :param utc_approver_response_date: The utc_approver_response_date of this ProductLineApprovalDto.  # noqa: E501
        :type: datetime
        """

        self._utc_approver_response_date = utc_approver_response_date

    @property
    def response(self):
        """Gets the response of this ProductLineApprovalDto.  # noqa: E501


        :return: The response of this ProductLineApprovalDto.  # noqa: E501
        :rtype: ProductLineApprovalRequestResponseEnum
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ProductLineApprovalDto.


        :param response: The response of this ProductLineApprovalDto.  # noqa: E501
        :type: ProductLineApprovalRequestResponseEnum
        """

        self._response = response

    @property
    def response_reason(self):
        """Gets the response_reason of this ProductLineApprovalDto.  # noqa: E501

        The approver's reason for the response  # noqa: E501

        :return: The response_reason of this ProductLineApprovalDto.  # noqa: E501
        :rtype: str
        """
        return self._response_reason

    @response_reason.setter
    def response_reason(self, response_reason):
        """Sets the response_reason of this ProductLineApprovalDto.

        The approver's reason for the response  # noqa: E501

        :param response_reason: The response_reason of this ProductLineApprovalDto.  # noqa: E501
        :type: str
        """

        self._response_reason = response_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineApprovalDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineApprovalDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
