# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'licence_number': 'str',
        'country_id': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'licence_number': 'licenceNumber',
        'country_id': 'countryId',
        'type_id': 'typeId'
    }

    def __init__(self, id=None, licence_number=None, country_id=None, type_id=None):  # noqa: E501
        """LicenceDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._licence_number = None
        self._country_id = None
        self._type_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.licence_number = licence_number
        self.country_id = country_id
        self.type_id = type_id

    @property
    def id(self):
        """Gets the id of this LicenceDto.  # noqa: E501

        The unique identifier of the licence.  # noqa: E501

        :return: The id of this LicenceDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenceDto.

        The unique identifier of the licence.  # noqa: E501

        :param id: The id of this LicenceDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def licence_number(self):
        """Gets the licence_number of this LicenceDto.  # noqa: E501

        The licence number.  # noqa: E501

        :return: The licence_number of this LicenceDto.  # noqa: E501
        :rtype: str
        """
        return self._licence_number

    @licence_number.setter
    def licence_number(self, licence_number):
        """Sets the licence_number of this LicenceDto.

        The licence number.  # noqa: E501

        :param licence_number: The licence_number of this LicenceDto.  # noqa: E501
        :type: str
        """
        if licence_number is None:
            raise ValueError("Invalid value for `licence_number`, must not be `None`")  # noqa: E501

        self._licence_number = licence_number

    @property
    def country_id(self):
        """Gets the country_id of this LicenceDto.  # noqa: E501

        The country id.  # noqa: E501

        :return: The country_id of this LicenceDto.  # noqa: E501
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this LicenceDto.

        The country id.  # noqa: E501

        :param country_id: The country_id of this LicenceDto.  # noqa: E501
        :type: str
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")  # noqa: E501

        self._country_id = country_id

    @property
    def type_id(self):
        """Gets the type_id of this LicenceDto.  # noqa: E501

        The licence type id.  # noqa: E501

        :return: The type_id of this LicenceDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this LicenceDto.

        The licence type id.  # noqa: E501

        :param type_id: The type_id of this LicenceDto.  # noqa: E501
        :type: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
