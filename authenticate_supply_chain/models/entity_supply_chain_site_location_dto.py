# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntitySupplyChainSiteLocationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'str',
        'site_name': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'tier': 'int',
        'company_id': 'str',
        'company_name': 'str',
        'status': 'str',
        'tier1_company_id': 'str'
    }

    attribute_map = {
        'site_id': 'siteId',
        'site_name': 'siteName',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'tier': 'tier',
        'company_id': 'companyId',
        'company_name': 'companyName',
        'status': 'status',
        'tier1_company_id': 'tier1CompanyId'
    }

    def __init__(self, site_id=None, site_name=None, longitude=None, latitude=None, tier=None, company_id=None, company_name=None, status=None, tier1_company_id=None):  # noqa: E501
        """EntitySupplyChainSiteLocationDto - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._site_name = None
        self._longitude = None
        self._latitude = None
        self._tier = None
        self._company_id = None
        self._company_name = None
        self._status = None
        self._tier1_company_id = None
        self.discriminator = None
        if site_id is not None:
            self.site_id = site_id
        if site_name is not None:
            self.site_name = site_name
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if tier is not None:
            self.tier = tier
        if company_id is not None:
            self.company_id = company_id
        if company_name is not None:
            self.company_name = company_name
        if status is not None:
            self.status = status
        if tier1_company_id is not None:
            self.tier1_company_id = tier1_company_id

    @property
    def site_id(self):
        """Gets the site_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The site_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this EntitySupplyChainSiteLocationDto.


        :param site_id: The site_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The site_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this EntitySupplyChainSiteLocationDto.


        :param site_name: The site_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def longitude(self):
        """Gets the longitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The longitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this EntitySupplyChainSiteLocationDto.


        :param longitude: The longitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The latitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this EntitySupplyChainSiteLocationDto.


        :param latitude: The latitude of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def tier(self):
        """Gets the tier of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The tier of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this EntitySupplyChainSiteLocationDto.


        :param tier: The tier of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: int
        """

        self._tier = tier

    @property
    def company_id(self):
        """Gets the company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this EntitySupplyChainSiteLocationDto.


        :param company_id: The company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The company_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this EntitySupplyChainSiteLocationDto.


        :param company_name: The company_name of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def status(self):
        """Gets the status of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The status of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EntitySupplyChainSiteLocationDto.


        :param status: The status of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tier1_company_id(self):
        """Gets the tier1_company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501


        :return: The tier1_company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._tier1_company_id

    @tier1_company_id.setter
    def tier1_company_id(self, tier1_company_id):
        """Sets the tier1_company_id of this EntitySupplyChainSiteLocationDto.


        :param tier1_company_id: The tier1_company_id of this EntitySupplyChainSiteLocationDto.  # noqa: E501
        :type: str
        """

        self._tier1_company_id = tier1_company_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySupplyChainSiteLocationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySupplyChainSiteLocationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
