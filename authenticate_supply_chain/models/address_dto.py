# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line1': 'str',
        'line2': 'str',
        'line3': 'str',
        'line4': 'str',
        'city': 'str',
        'postcode': 'str',
        'region': 'str',
        'country': 'str',
        'latitude': 'str',
        'longitude': 'str'
    }

    attribute_map = {
        'line1': 'line1',
        'line2': 'line2',
        'line3': 'line3',
        'line4': 'line4',
        'city': 'city',
        'postcode': 'postcode',
        'region': 'region',
        'country': 'country',
        'latitude': 'latitude',
        'longitude': 'longitude'
    }

    def __init__(self, line1=None, line2=None, line3=None, line4=None, city=None, postcode=None, region=None, country=None, latitude=None, longitude=None):  # noqa: E501
        """AddressDto - a model defined in Swagger"""  # noqa: E501
        self._line1 = None
        self._line2 = None
        self._line3 = None
        self._line4 = None
        self._city = None
        self._postcode = None
        self._region = None
        self._country = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None
        if line1 is not None:
            self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if line3 is not None:
            self.line3 = line3
        if line4 is not None:
            self.line4 = line4
        if city is not None:
            self.city = city
        if postcode is not None:
            self.postcode = postcode
        if region is not None:
            self.region = region
        if country is not None:
            self.country = country
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude

    @property
    def line1(self):
        """Gets the line1 of this AddressDto.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The line1 of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this AddressDto.

        Address line 1  # noqa: E501

        :param line1: The line1 of this AddressDto.  # noqa: E501
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this AddressDto.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The line2 of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this AddressDto.

        Address line 2  # noqa: E501

        :param line2: The line2 of this AddressDto.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this AddressDto.  # noqa: E501

        Address line 3  # noqa: E501

        :return: The line3 of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this AddressDto.

        Address line 3  # noqa: E501

        :param line3: The line3 of this AddressDto.  # noqa: E501
        :type: str
        """

        self._line3 = line3

    @property
    def line4(self):
        """Gets the line4 of this AddressDto.  # noqa: E501

        Address line 4  # noqa: E501

        :return: The line4 of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._line4

    @line4.setter
    def line4(self, line4):
        """Sets the line4 of this AddressDto.

        Address line 4  # noqa: E501

        :param line4: The line4 of this AddressDto.  # noqa: E501
        :type: str
        """

        self._line4 = line4

    @property
    def city(self):
        """Gets the city of this AddressDto.  # noqa: E501

        Address City or Town  # noqa: E501

        :return: The city of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressDto.

        Address City or Town  # noqa: E501

        :param city: The city of this AddressDto.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postcode(self):
        """Gets the postcode of this AddressDto.  # noqa: E501

        Address postcode / zipcode  # noqa: E501

        :return: The postcode of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this AddressDto.

        Address postcode / zipcode  # noqa: E501

        :param postcode: The postcode of this AddressDto.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def region(self):
        """Gets the region of this AddressDto.  # noqa: E501

        Address Region  # noqa: E501

        :return: The region of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressDto.

        Address Region  # noqa: E501

        :param region: The region of this AddressDto.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country(self):
        """Gets the country of this AddressDto.  # noqa: E501

        Address Country  # noqa: E501

        :return: The country of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDto.

        Address Country  # noqa: E501

        :param country: The country of this AddressDto.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this AddressDto.  # noqa: E501

        Map Location Latitude  # noqa: E501

        :return: The latitude of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AddressDto.

        Map Location Latitude  # noqa: E501

        :param latitude: The latitude of this AddressDto.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AddressDto.  # noqa: E501

        Map Location Longitude  # noqa: E501

        :return: The longitude of this AddressDto.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AddressDto.

        Map Location Longitude  # noqa: E501

        :param longitude: The longitude of this AddressDto.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
