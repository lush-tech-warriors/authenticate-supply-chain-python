# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineApprovalRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'utc_created_date': 'datetime',
        'requested_by_user_id': 'str',
        'requested_by_user_name': 'str',
        'approver_user_id': 'str',
        'approver_user_name': 'str',
        'product_line_approval_id': 'int'
    }

    attribute_map = {
        'utc_created_date': 'utcCreatedDate',
        'requested_by_user_id': 'requestedByUserId',
        'requested_by_user_name': 'requestedByUserName',
        'approver_user_id': 'approverUserId',
        'approver_user_name': 'approverUserName',
        'product_line_approval_id': 'productLineApprovalId'
    }

    def __init__(self, utc_created_date=None, requested_by_user_id=None, requested_by_user_name=None, approver_user_id=None, approver_user_name=None, product_line_approval_id=None):  # noqa: E501
        """ProductLineApprovalRequestDto - a model defined in Swagger"""  # noqa: E501
        self._utc_created_date = None
        self._requested_by_user_id = None
        self._requested_by_user_name = None
        self._approver_user_id = None
        self._approver_user_name = None
        self._product_line_approval_id = None
        self.discriminator = None
        if utc_created_date is not None:
            self.utc_created_date = utc_created_date
        if requested_by_user_id is not None:
            self.requested_by_user_id = requested_by_user_id
        if requested_by_user_name is not None:
            self.requested_by_user_name = requested_by_user_name
        if approver_user_id is not None:
            self.approver_user_id = approver_user_id
        if approver_user_name is not None:
            self.approver_user_name = approver_user_name
        if product_line_approval_id is not None:
            self.product_line_approval_id = product_line_approval_id

    @property
    def utc_created_date(self):
        """Gets the utc_created_date of this ProductLineApprovalRequestDto.  # noqa: E501

        The date of the request  # noqa: E501

        :return: The utc_created_date of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_created_date

    @utc_created_date.setter
    def utc_created_date(self, utc_created_date):
        """Sets the utc_created_date of this ProductLineApprovalRequestDto.

        The date of the request  # noqa: E501

        :param utc_created_date: The utc_created_date of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: datetime
        """

        self._utc_created_date = utc_created_date

    @property
    def requested_by_user_id(self):
        """Gets the requested_by_user_id of this ProductLineApprovalRequestDto.  # noqa: E501

        The identifier of the request user  # noqa: E501

        :return: The requested_by_user_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_user_id

    @requested_by_user_id.setter
    def requested_by_user_id(self, requested_by_user_id):
        """Sets the requested_by_user_id of this ProductLineApprovalRequestDto.

        The identifier of the request user  # noqa: E501

        :param requested_by_user_id: The requested_by_user_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: str
        """

        self._requested_by_user_id = requested_by_user_id

    @property
    def requested_by_user_name(self):
        """Gets the requested_by_user_name of this ProductLineApprovalRequestDto.  # noqa: E501

        The username of the request user  # noqa: E501

        :return: The requested_by_user_name of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._requested_by_user_name

    @requested_by_user_name.setter
    def requested_by_user_name(self, requested_by_user_name):
        """Sets the requested_by_user_name of this ProductLineApprovalRequestDto.

        The username of the request user  # noqa: E501

        :param requested_by_user_name: The requested_by_user_name of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: str
        """

        self._requested_by_user_name = requested_by_user_name

    @property
    def approver_user_id(self):
        """Gets the approver_user_id of this ProductLineApprovalRequestDto.  # noqa: E501

        The identifier of the approver  # noqa: E501

        :return: The approver_user_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._approver_user_id

    @approver_user_id.setter
    def approver_user_id(self, approver_user_id):
        """Sets the approver_user_id of this ProductLineApprovalRequestDto.

        The identifier of the approver  # noqa: E501

        :param approver_user_id: The approver_user_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: str
        """

        self._approver_user_id = approver_user_id

    @property
    def approver_user_name(self):
        """Gets the approver_user_name of this ProductLineApprovalRequestDto.  # noqa: E501

        The username of the approver  # noqa: E501

        :return: The approver_user_name of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._approver_user_name

    @approver_user_name.setter
    def approver_user_name(self, approver_user_name):
        """Sets the approver_user_name of this ProductLineApprovalRequestDto.

        The username of the approver  # noqa: E501

        :param approver_user_name: The approver_user_name of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: str
        """

        self._approver_user_name = approver_user_name

    @property
    def product_line_approval_id(self):
        """Gets the product_line_approval_id of this ProductLineApprovalRequestDto.  # noqa: E501

        The identifier of the parent approval  # noqa: E501

        :return: The product_line_approval_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :rtype: int
        """
        return self._product_line_approval_id

    @product_line_approval_id.setter
    def product_line_approval_id(self, product_line_approval_id):
        """Sets the product_line_approval_id of this ProductLineApprovalRequestDto.

        The identifier of the parent approval  # noqa: E501

        :param product_line_approval_id: The product_line_approval_id of this ProductLineApprovalRequestDto.  # noqa: E501
        :type: int
        """

        self._product_line_approval_id = product_line_approval_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineApprovalRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineApprovalRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
