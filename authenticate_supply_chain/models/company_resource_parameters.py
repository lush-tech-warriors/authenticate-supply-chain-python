# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyResourceParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_query': 'str',
        'page_number': 'int',
        'page_size': 'int',
        'order_by': 'str',
        'country': 'str',
        'postcode': 'str',
        'authenticate_member': 'bool',
        'company_type': 'str',
        'company_ids': 'list[str]',
        'supplier_codes': 'list[str]',
        'licence_numbers': 'list[str]'
    }

    attribute_map = {
        'search_query': 'searchQuery',
        'page_number': 'pageNumber',
        'page_size': 'pageSize',
        'order_by': 'orderBy',
        'country': 'country',
        'postcode': 'postcode',
        'authenticate_member': 'authenticateMember',
        'company_type': 'companyType',
        'company_ids': 'companyIds',
        'supplier_codes': 'supplierCodes',
        'licence_numbers': 'licenceNumbers'
    }

    def __init__(self, search_query=None, page_number=None, page_size=None, order_by=None, country=None, postcode=None, authenticate_member=None, company_type=None, company_ids=None, supplier_codes=None, licence_numbers=None):  # noqa: E501
        """CompanyResourceParameters - a model defined in Swagger"""  # noqa: E501
        self._search_query = None
        self._page_number = None
        self._page_size = None
        self._order_by = None
        self._country = None
        self._postcode = None
        self._authenticate_member = None
        self._company_type = None
        self._company_ids = None
        self._supplier_codes = None
        self._licence_numbers = None
        self.discriminator = None
        if search_query is not None:
            self.search_query = search_query
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if order_by is not None:
            self.order_by = order_by
        if country is not None:
            self.country = country
        if postcode is not None:
            self.postcode = postcode
        if authenticate_member is not None:
            self.authenticate_member = authenticate_member
        if company_type is not None:
            self.company_type = company_type
        if company_ids is not None:
            self.company_ids = company_ids
        if supplier_codes is not None:
            self.supplier_codes = supplier_codes
        if licence_numbers is not None:
            self.licence_numbers = licence_numbers

    @property
    def search_query(self):
        """Gets the search_query of this CompanyResourceParameters.  # noqa: E501


        :return: The search_query of this CompanyResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this CompanyResourceParameters.


        :param search_query: The search_query of this CompanyResourceParameters.  # noqa: E501
        :type: str
        """

        self._search_query = search_query

    @property
    def page_number(self):
        """Gets the page_number of this CompanyResourceParameters.  # noqa: E501


        :return: The page_number of this CompanyResourceParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this CompanyResourceParameters.


        :param page_number: The page_number of this CompanyResourceParameters.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this CompanyResourceParameters.  # noqa: E501


        :return: The page_size of this CompanyResourceParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this CompanyResourceParameters.


        :param page_size: The page_size of this CompanyResourceParameters.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def order_by(self):
        """Gets the order_by of this CompanyResourceParameters.  # noqa: E501


        :return: The order_by of this CompanyResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this CompanyResourceParameters.


        :param order_by: The order_by of this CompanyResourceParameters.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def country(self):
        """Gets the country of this CompanyResourceParameters.  # noqa: E501

        Filter supplier by country  # noqa: E501

        :return: The country of this CompanyResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CompanyResourceParameters.

        Filter supplier by country  # noqa: E501

        :param country: The country of this CompanyResourceParameters.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def postcode(self):
        """Gets the postcode of this CompanyResourceParameters.  # noqa: E501

        Filter supplier by postcode  # noqa: E501

        :return: The postcode of this CompanyResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CompanyResourceParameters.

        Filter supplier by postcode  # noqa: E501

        :param postcode: The postcode of this CompanyResourceParameters.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def authenticate_member(self):
        """Gets the authenticate_member of this CompanyResourceParameters.  # noqa: E501

        Filter by whether the company is a member of the authenticate platform or not  # noqa: E501

        :return: The authenticate_member of this CompanyResourceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._authenticate_member

    @authenticate_member.setter
    def authenticate_member(self, authenticate_member):
        """Sets the authenticate_member of this CompanyResourceParameters.

        Filter by whether the company is a member of the authenticate platform or not  # noqa: E501

        :param authenticate_member: The authenticate_member of this CompanyResourceParameters.  # noqa: E501
        :type: bool
        """

        self._authenticate_member = authenticate_member

    @property
    def company_type(self):
        """Gets the company_type of this CompanyResourceParameters.  # noqa: E501

        Filter by ONS Company Type  # noqa: E501

        :return: The company_type of this CompanyResourceParameters.  # noqa: E501
        :rtype: str
        """
        return self._company_type

    @company_type.setter
    def company_type(self, company_type):
        """Sets the company_type of this CompanyResourceParameters.

        Filter by ONS Company Type  # noqa: E501

        :param company_type: The company_type of this CompanyResourceParameters.  # noqa: E501
        :type: str
        """

        self._company_type = company_type

    @property
    def company_ids(self):
        """Gets the company_ids of this CompanyResourceParameters.  # noqa: E501

        Filter by list of company id's  # noqa: E501

        :return: The company_ids of this CompanyResourceParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._company_ids

    @company_ids.setter
    def company_ids(self, company_ids):
        """Sets the company_ids of this CompanyResourceParameters.

        Filter by list of company id's  # noqa: E501

        :param company_ids: The company_ids of this CompanyResourceParameters.  # noqa: E501
        :type: list[str]
        """

        self._company_ids = company_ids

    @property
    def supplier_codes(self):
        """Gets the supplier_codes of this CompanyResourceParameters.  # noqa: E501

        Filter by supplier codes  # noqa: E501

        :return: The supplier_codes of this CompanyResourceParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._supplier_codes

    @supplier_codes.setter
    def supplier_codes(self, supplier_codes):
        """Sets the supplier_codes of this CompanyResourceParameters.

        Filter by supplier codes  # noqa: E501

        :param supplier_codes: The supplier_codes of this CompanyResourceParameters.  # noqa: E501
        :type: list[str]
        """

        self._supplier_codes = supplier_codes

    @property
    def licence_numbers(self):
        """Gets the licence_numbers of this CompanyResourceParameters.  # noqa: E501

        Filter by licence numbers  # noqa: E501

        :return: The licence_numbers of this CompanyResourceParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._licence_numbers

    @licence_numbers.setter
    def licence_numbers(self, licence_numbers):
        """Sets the licence_numbers of this CompanyResourceParameters.

        Filter by licence numbers  # noqa: E501

        :param licence_numbers: The licence_numbers of this CompanyResourceParameters.  # noqa: E501
        :type: list[str]
        """

        self._licence_numbers = licence_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyResourceParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyResourceParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
