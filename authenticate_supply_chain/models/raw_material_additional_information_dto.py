# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMaterialAdditionalInformationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_contingency_supplier': 'bool',
        'allow_supplier_to_edit': 'bool',
        'fair_trade': 'bool',
        'sustainably_sourced': 'bool',
        'organic': 'bool',
        'january': 'bool',
        'february': 'bool',
        'march': 'bool',
        'april': 'bool',
        'may': 'bool',
        'june': 'bool',
        'july': 'bool',
        'august': 'bool',
        'september': 'bool',
        'october': 'bool',
        'november': 'bool',
        'december': 'bool'
    }

    attribute_map = {
        'is_contingency_supplier': 'isContingencySupplier',
        'allow_supplier_to_edit': 'allowSupplierToEdit',
        'fair_trade': 'fairTrade',
        'sustainably_sourced': 'sustainablySourced',
        'organic': 'organic',
        'january': 'january',
        'february': 'february',
        'march': 'march',
        'april': 'april',
        'may': 'may',
        'june': 'june',
        'july': 'july',
        'august': 'august',
        'september': 'september',
        'october': 'october',
        'november': 'november',
        'december': 'december'
    }

    def __init__(self, is_contingency_supplier=None, allow_supplier_to_edit=None, fair_trade=None, sustainably_sourced=None, organic=None, january=None, february=None, march=None, april=None, may=None, june=None, july=None, august=None, september=None, october=None, november=None, december=None):  # noqa: E501
        """RawMaterialAdditionalInformationDto - a model defined in Swagger"""  # noqa: E501
        self._is_contingency_supplier = None
        self._allow_supplier_to_edit = None
        self._fair_trade = None
        self._sustainably_sourced = None
        self._organic = None
        self._january = None
        self._february = None
        self._march = None
        self._april = None
        self._may = None
        self._june = None
        self._july = None
        self._august = None
        self._september = None
        self._october = None
        self._november = None
        self._december = None
        self.discriminator = None
        if is_contingency_supplier is not None:
            self.is_contingency_supplier = is_contingency_supplier
        if allow_supplier_to_edit is not None:
            self.allow_supplier_to_edit = allow_supplier_to_edit
        if fair_trade is not None:
            self.fair_trade = fair_trade
        if sustainably_sourced is not None:
            self.sustainably_sourced = sustainably_sourced
        if organic is not None:
            self.organic = organic
        if january is not None:
            self.january = january
        if february is not None:
            self.february = february
        if march is not None:
            self.march = march
        if april is not None:
            self.april = april
        if may is not None:
            self.may = may
        if june is not None:
            self.june = june
        if july is not None:
            self.july = july
        if august is not None:
            self.august = august
        if september is not None:
            self.september = september
        if october is not None:
            self.october = october
        if november is not None:
            self.november = november
        if december is not None:
            self.december = december

    @property
    def is_contingency_supplier(self):
        """Gets the is_contingency_supplier of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material has a contingency supplier  # noqa: E501

        :return: The is_contingency_supplier of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_contingency_supplier

    @is_contingency_supplier.setter
    def is_contingency_supplier(self, is_contingency_supplier):
        """Sets the is_contingency_supplier of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material has a contingency supplier  # noqa: E501

        :param is_contingency_supplier: The is_contingency_supplier of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._is_contingency_supplier = is_contingency_supplier

    @property
    def allow_supplier_to_edit(self):
        """Gets the allow_supplier_to_edit of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material information can be edited by the supplier  # noqa: E501

        :return: The allow_supplier_to_edit of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_supplier_to_edit

    @allow_supplier_to_edit.setter
    def allow_supplier_to_edit(self, allow_supplier_to_edit):
        """Sets the allow_supplier_to_edit of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material information can be edited by the supplier  # noqa: E501

        :param allow_supplier_to_edit: The allow_supplier_to_edit of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._allow_supplier_to_edit = allow_supplier_to_edit

    @property
    def fair_trade(self):
        """Gets the fair_trade of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is Fair Trade  # noqa: E501

        :return: The fair_trade of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._fair_trade

    @fair_trade.setter
    def fair_trade(self, fair_trade):
        """Sets the fair_trade of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is Fair Trade  # noqa: E501

        :param fair_trade: The fair_trade of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._fair_trade = fair_trade

    @property
    def sustainably_sourced(self):
        """Gets the sustainably_sourced of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is Sustainably Sourced  # noqa: E501

        :return: The sustainably_sourced of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._sustainably_sourced

    @sustainably_sourced.setter
    def sustainably_sourced(self, sustainably_sourced):
        """Sets the sustainably_sourced of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is Sustainably Sourced  # noqa: E501

        :param sustainably_sourced: The sustainably_sourced of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._sustainably_sourced = sustainably_sourced

    @property
    def organic(self):
        """Gets the organic of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is Organic  # noqa: E501

        :return: The organic of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._organic

    @organic.setter
    def organic(self, organic):
        """Sets the organic of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is Organic  # noqa: E501

        :param organic: The organic of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._organic = organic

    @property
    def january(self):
        """Gets the january of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in January  # noqa: E501

        :return: The january of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._january

    @january.setter
    def january(self, january):
        """Sets the january of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in January  # noqa: E501

        :param january: The january of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._january = january

    @property
    def february(self):
        """Gets the february of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in February  # noqa: E501

        :return: The february of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._february

    @february.setter
    def february(self, february):
        """Sets the february of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in February  # noqa: E501

        :param february: The february of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._february = february

    @property
    def march(self):
        """Gets the march of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in March  # noqa: E501

        :return: The march of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._march

    @march.setter
    def march(self, march):
        """Sets the march of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in March  # noqa: E501

        :param march: The march of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._march = march

    @property
    def april(self):
        """Gets the april of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in April  # noqa: E501

        :return: The april of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._april

    @april.setter
    def april(self, april):
        """Sets the april of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in April  # noqa: E501

        :param april: The april of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._april = april

    @property
    def may(self):
        """Gets the may of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in May  # noqa: E501

        :return: The may of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._may

    @may.setter
    def may(self, may):
        """Sets the may of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in May  # noqa: E501

        :param may: The may of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._may = may

    @property
    def june(self):
        """Gets the june of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in June  # noqa: E501

        :return: The june of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._june

    @june.setter
    def june(self, june):
        """Sets the june of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in June  # noqa: E501

        :param june: The june of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._june = june

    @property
    def july(self):
        """Gets the july of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in July  # noqa: E501

        :return: The july of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._july

    @july.setter
    def july(self, july):
        """Sets the july of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in July  # noqa: E501

        :param july: The july of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._july = july

    @property
    def august(self):
        """Gets the august of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in August  # noqa: E501

        :return: The august of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._august

    @august.setter
    def august(self, august):
        """Sets the august of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in August  # noqa: E501

        :param august: The august of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._august = august

    @property
    def september(self):
        """Gets the september of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in September  # noqa: E501

        :return: The september of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._september

    @september.setter
    def september(self, september):
        """Sets the september of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in September  # noqa: E501

        :param september: The september of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._september = september

    @property
    def october(self):
        """Gets the october of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in October  # noqa: E501

        :return: The october of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._october

    @october.setter
    def october(self, october):
        """Sets the october of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in October  # noqa: E501

        :param october: The october of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._october = october

    @property
    def november(self):
        """Gets the november of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in November  # noqa: E501

        :return: The november of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._november

    @november.setter
    def november(self, november):
        """Sets the november of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in November  # noqa: E501

        :param november: The november of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._november = november

    @property
    def december(self):
        """Gets the december of this RawMaterialAdditionalInformationDto.  # noqa: E501

        Flag to indicate if the raw material is supplied in December  # noqa: E501

        :return: The december of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :rtype: bool
        """
        return self._december

    @december.setter
    def december(self, december):
        """Sets the december of this RawMaterialAdditionalInformationDto.

        Flag to indicate if the raw material is supplied in December  # noqa: E501

        :param december: The december of this RawMaterialAdditionalInformationDto.  # noqa: E501
        :type: bool
        """

        self._december = december

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMaterialAdditionalInformationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMaterialAdditionalInformationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
