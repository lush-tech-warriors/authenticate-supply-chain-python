# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CountryEsgScoreDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'score': 'float',
        'weight': 'float',
        'last_updated_date': 'datetime',
        'risk_points': 'int',
        'maximum_risk_points': 'int',
        'risk_classification': 'str',
        'risk_classification_value': 'int'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'score': 'score',
        'weight': 'weight',
        'last_updated_date': 'lastUpdatedDate',
        'risk_points': 'riskPoints',
        'maximum_risk_points': 'maximumRiskPoints',
        'risk_classification': 'riskClassification',
        'risk_classification_value': 'riskClassificationValue'
    }

    def __init__(self, id=None, type=None, score=None, weight=None, last_updated_date=None, risk_points=None, maximum_risk_points=None, risk_classification=None, risk_classification_value=None):  # noqa: E501
        """CountryEsgScoreDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._score = None
        self._weight = None
        self._last_updated_date = None
        self._risk_points = None
        self._maximum_risk_points = None
        self._risk_classification = None
        self._risk_classification_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if score is not None:
            self.score = score
        if weight is not None:
            self.weight = weight
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if risk_points is not None:
            self.risk_points = risk_points
        if maximum_risk_points is not None:
            self.maximum_risk_points = maximum_risk_points
        if risk_classification is not None:
            self.risk_classification = risk_classification
        if risk_classification_value is not None:
            self.risk_classification_value = risk_classification_value

    @property
    def id(self):
        """Gets the id of this CountryEsgScoreDto.  # noqa: E501

        the score Id  # noqa: E501

        :return: The id of this CountryEsgScoreDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CountryEsgScoreDto.

        the score Id  # noqa: E501

        :param id: The id of this CountryEsgScoreDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CountryEsgScoreDto.  # noqa: E501

        The Score type (Environmental\\Social\\Governance)  # noqa: E501

        :return: The type of this CountryEsgScoreDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CountryEsgScoreDto.

        The Score type (Environmental\\Social\\Governance)  # noqa: E501

        :param type: The type of this CountryEsgScoreDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def score(self):
        """Gets the score of this CountryEsgScoreDto.  # noqa: E501

        The Score for the type  # noqa: E501

        :return: The score of this CountryEsgScoreDto.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CountryEsgScoreDto.

        The Score for the type  # noqa: E501

        :param score: The score of this CountryEsgScoreDto.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def weight(self):
        """Gets the weight of this CountryEsgScoreDto.  # noqa: E501

        The score weighting  # noqa: E501

        :return: The weight of this CountryEsgScoreDto.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CountryEsgScoreDto.

        The score weighting  # noqa: E501

        :param weight: The weight of this CountryEsgScoreDto.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this CountryEsgScoreDto.  # noqa: E501

        When the score was last updated  # noqa: E501

        :return: The last_updated_date of this CountryEsgScoreDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this CountryEsgScoreDto.

        When the score was last updated  # noqa: E501

        :param last_updated_date: The last_updated_date of this CountryEsgScoreDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def risk_points(self):
        """Gets the risk_points of this CountryEsgScoreDto.  # noqa: E501

        The Score Risk  # noqa: E501

        :return: The risk_points of this CountryEsgScoreDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_points

    @risk_points.setter
    def risk_points(self, risk_points):
        """Sets the risk_points of this CountryEsgScoreDto.

        The Score Risk  # noqa: E501

        :param risk_points: The risk_points of this CountryEsgScoreDto.  # noqa: E501
        :type: int
        """

        self._risk_points = risk_points

    @property
    def maximum_risk_points(self):
        """Gets the maximum_risk_points of this CountryEsgScoreDto.  # noqa: E501

        The maximum risk for this type  # noqa: E501

        :return: The maximum_risk_points of this CountryEsgScoreDto.  # noqa: E501
        :rtype: int
        """
        return self._maximum_risk_points

    @maximum_risk_points.setter
    def maximum_risk_points(self, maximum_risk_points):
        """Sets the maximum_risk_points of this CountryEsgScoreDto.

        The maximum risk for this type  # noqa: E501

        :param maximum_risk_points: The maximum_risk_points of this CountryEsgScoreDto.  # noqa: E501
        :type: int
        """

        self._maximum_risk_points = maximum_risk_points

    @property
    def risk_classification(self):
        """Gets the risk_classification of this CountryEsgScoreDto.  # noqa: E501

        Risk classification text  # noqa: E501

        :return: The risk_classification of this CountryEsgScoreDto.  # noqa: E501
        :rtype: str
        """
        return self._risk_classification

    @risk_classification.setter
    def risk_classification(self, risk_classification):
        """Sets the risk_classification of this CountryEsgScoreDto.

        Risk classification text  # noqa: E501

        :param risk_classification: The risk_classification of this CountryEsgScoreDto.  # noqa: E501
        :type: str
        """

        self._risk_classification = risk_classification

    @property
    def risk_classification_value(self):
        """Gets the risk_classification_value of this CountryEsgScoreDto.  # noqa: E501

        Risk classification number  # noqa: E501

        :return: The risk_classification_value of this CountryEsgScoreDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_classification_value

    @risk_classification_value.setter
    def risk_classification_value(self, risk_classification_value):
        """Sets the risk_classification_value of this CountryEsgScoreDto.

        Risk classification number  # noqa: E501

        :param risk_classification_value: The risk_classification_value of this CountryEsgScoreDto.  # noqa: E501
        :type: int
        """

        self._risk_classification_value = risk_classification_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountryEsgScoreDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryEsgScoreDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
