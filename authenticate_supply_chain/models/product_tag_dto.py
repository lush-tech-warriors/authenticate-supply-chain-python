# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductTagDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_id': 'int',
        'product_line_id': 'str'
    }

    attribute_map = {
        'tag_id': 'tagId',
        'product_line_id': 'productLineId'
    }

    def __init__(self, tag_id=None, product_line_id=None):  # noqa: E501
        """ProductTagDto - a model defined in Swagger"""  # noqa: E501
        self._tag_id = None
        self._product_line_id = None
        self.discriminator = None
        if tag_id is not None:
            self.tag_id = tag_id
        if product_line_id is not None:
            self.product_line_id = product_line_id

    @property
    def tag_id(self):
        """Gets the tag_id of this ProductTagDto.  # noqa: E501

        The unique identifier of the Tag within the Authenticate platform  # noqa: E501

        :return: The tag_id of this ProductTagDto.  # noqa: E501
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this ProductTagDto.

        The unique identifier of the Tag within the Authenticate platform  # noqa: E501

        :param tag_id: The tag_id of this ProductTagDto.  # noqa: E501
        :type: int
        """

        self._tag_id = tag_id

    @property
    def product_line_id(self):
        """Gets the product_line_id of this ProductTagDto.  # noqa: E501

        The unique identifier of the product line within the Authenticate platform  # noqa: E501

        :return: The product_line_id of this ProductTagDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line_id

    @product_line_id.setter
    def product_line_id(self, product_line_id):
        """Sets the product_line_id of this ProductTagDto.

        The unique identifier of the product line within the Authenticate platform  # noqa: E501

        :param product_line_id: The product_line_id of this ProductTagDto.  # noqa: E501
        :type: str
        """

        self._product_line_id = product_line_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductTagDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductTagDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
