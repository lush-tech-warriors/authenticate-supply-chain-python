# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeclaredSupplyChainForUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_site_ids': 'list[str]',
        'parent_declared_supply_chain_id': 'str'
    }

    attribute_map = {
        'customer_site_ids': 'customerSiteIds',
        'parent_declared_supply_chain_id': 'parentDeclaredSupplyChainId'
    }

    def __init__(self, customer_site_ids=None, parent_declared_supply_chain_id=None):  # noqa: E501
        """DeclaredSupplyChainForUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._customer_site_ids = None
        self._parent_declared_supply_chain_id = None
        self.discriminator = None
        if customer_site_ids is not None:
            self.customer_site_ids = customer_site_ids
        if parent_declared_supply_chain_id is not None:
            self.parent_declared_supply_chain_id = parent_declared_supply_chain_id

    @property
    def customer_site_ids(self):
        """Gets the customer_site_ids of this DeclaredSupplyChainForUpdateDto.  # noqa: E501

        The customer sites for the declared supply chain  # noqa: E501

        :return: The customer_site_ids of this DeclaredSupplyChainForUpdateDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._customer_site_ids

    @customer_site_ids.setter
    def customer_site_ids(self, customer_site_ids):
        """Sets the customer_site_ids of this DeclaredSupplyChainForUpdateDto.

        The customer sites for the declared supply chain  # noqa: E501

        :param customer_site_ids: The customer_site_ids of this DeclaredSupplyChainForUpdateDto.  # noqa: E501
        :type: list[str]
        """

        self._customer_site_ids = customer_site_ids

    @property
    def parent_declared_supply_chain_id(self):
        """Gets the parent_declared_supply_chain_id of this DeclaredSupplyChainForUpdateDto.  # noqa: E501

        The parent declared supply chain id  # noqa: E501

        :return: The parent_declared_supply_chain_id of this DeclaredSupplyChainForUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_declared_supply_chain_id

    @parent_declared_supply_chain_id.setter
    def parent_declared_supply_chain_id(self, parent_declared_supply_chain_id):
        """Sets the parent_declared_supply_chain_id of this DeclaredSupplyChainForUpdateDto.

        The parent declared supply chain id  # noqa: E501

        :param parent_declared_supply_chain_id: The parent_declared_supply_chain_id of this DeclaredSupplyChainForUpdateDto.  # noqa: E501
        :type: str
        """

        self._parent_declared_supply_chain_id = parent_declared_supply_chain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeclaredSupplyChainForUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeclaredSupplyChainForUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
