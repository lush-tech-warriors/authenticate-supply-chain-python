# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteCertificationStatusDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheme_name': 'str',
        'certificate_id': 'str',
        'status': 'str',
        'grade': 'str',
        'end_date': 'datetime'
    }

    attribute_map = {
        'scheme_name': 'schemeName',
        'certificate_id': 'certificateId',
        'status': 'status',
        'grade': 'grade',
        'end_date': 'endDate'
    }

    def __init__(self, scheme_name=None, certificate_id=None, status=None, grade=None, end_date=None):  # noqa: E501
        """SiteCertificationStatusDto - a model defined in Swagger"""  # noqa: E501
        self._scheme_name = None
        self._certificate_id = None
        self._status = None
        self._grade = None
        self._end_date = None
        self.discriminator = None
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if certificate_id is not None:
            self.certificate_id = certificate_id
        if status is not None:
            self.status = status
        if grade is not None:
            self.grade = grade
        if end_date is not None:
            self.end_date = end_date

    @property
    def scheme_name(self):
        """Gets the scheme_name of this SiteCertificationStatusDto.  # noqa: E501

        The certificate scheme  # noqa: E501

        :return: The scheme_name of this SiteCertificationStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this SiteCertificationStatusDto.

        The certificate scheme  # noqa: E501

        :param scheme_name: The scheme_name of this SiteCertificationStatusDto.  # noqa: E501
        :type: str
        """

        self._scheme_name = scheme_name

    @property
    def certificate_id(self):
        """Gets the certificate_id of this SiteCertificationStatusDto.  # noqa: E501

        The certificate identifier  # noqa: E501

        :return: The certificate_id of this SiteCertificationStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this SiteCertificationStatusDto.

        The certificate identifier  # noqa: E501

        :param certificate_id: The certificate_id of this SiteCertificationStatusDto.  # noqa: E501
        :type: str
        """

        self._certificate_id = certificate_id

    @property
    def status(self):
        """Gets the status of this SiteCertificationStatusDto.  # noqa: E501

        The certificate status  # noqa: E501

        :return: The status of this SiteCertificationStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SiteCertificationStatusDto.

        The certificate status  # noqa: E501

        :param status: The status of this SiteCertificationStatusDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def grade(self):
        """Gets the grade of this SiteCertificationStatusDto.  # noqa: E501

        The certificate grade  # noqa: E501

        :return: The grade of this SiteCertificationStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this SiteCertificationStatusDto.

        The certificate grade  # noqa: E501

        :param grade: The grade of this SiteCertificationStatusDto.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def end_date(self):
        """Gets the end_date of this SiteCertificationStatusDto.  # noqa: E501

        Certificate end date  # noqa: E501

        :return: The end_date of this SiteCertificationStatusDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SiteCertificationStatusDto.

        Certificate end date  # noqa: E501

        :param end_date: The end_date of this SiteCertificationStatusDto.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteCertificationStatusDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteCertificationStatusDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
