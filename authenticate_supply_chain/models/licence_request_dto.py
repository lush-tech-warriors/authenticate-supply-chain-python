# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenceRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type_id': 'str',
        'due_date': 'datetime',
        'requesting_company_id': 'str',
        'status': 'LicenceRequestEnum'
    }

    attribute_map = {
        'id': 'id',
        'type_id': 'typeId',
        'due_date': 'dueDate',
        'requesting_company_id': 'requestingCompanyId',
        'status': 'status'
    }

    def __init__(self, id=None, type_id=None, due_date=None, requesting_company_id=None, status=None):  # noqa: E501
        """LicenceRequestDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type_id = None
        self._due_date = None
        self._requesting_company_id = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type_id is not None:
            self.type_id = type_id
        if due_date is not None:
            self.due_date = due_date
        if requesting_company_id is not None:
            self.requesting_company_id = requesting_company_id
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this LicenceRequestDto.  # noqa: E501

        The unique identifier of the licence request.  # noqa: E501

        :return: The id of this LicenceRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenceRequestDto.

        The unique identifier of the licence request.  # noqa: E501

        :param id: The id of this LicenceRequestDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type_id(self):
        """Gets the type_id of this LicenceRequestDto.  # noqa: E501

        The licence type id.  # noqa: E501

        :return: The type_id of this LicenceRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this LicenceRequestDto.

        The licence type id.  # noqa: E501

        :param type_id: The type_id of this LicenceRequestDto.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    @property
    def due_date(self):
        """Gets the due_date of this LicenceRequestDto.  # noqa: E501

        The licence request due date.  # noqa: E501

        :return: The due_date of this LicenceRequestDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this LicenceRequestDto.

        The licence request due date.  # noqa: E501

        :param due_date: The due_date of this LicenceRequestDto.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def requesting_company_id(self):
        """Gets the requesting_company_id of this LicenceRequestDto.  # noqa: E501

        The company id who raised the licence request.  # noqa: E501

        :return: The requesting_company_id of this LicenceRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._requesting_company_id

    @requesting_company_id.setter
    def requesting_company_id(self, requesting_company_id):
        """Sets the requesting_company_id of this LicenceRequestDto.

        The company id who raised the licence request.  # noqa: E501

        :param requesting_company_id: The requesting_company_id of this LicenceRequestDto.  # noqa: E501
        :type: str
        """

        self._requesting_company_id = requesting_company_id

    @property
    def status(self):
        """Gets the status of this LicenceRequestDto.  # noqa: E501


        :return: The status of this LicenceRequestDto.  # noqa: E501
        :rtype: LicenceRequestEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LicenceRequestDto.


        :param status: The status of this LicenceRequestDto.  # noqa: E501
        :type: LicenceRequestEnum
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenceRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenceRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
