# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NoteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'details': 'str',
        'created_by_user_id': 'str',
        'utc_date_created': 'datetime',
        'documents': 'list[DocumentDto]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'details': 'details',
        'created_by_user_id': 'createdByUserId',
        'utc_date_created': 'utcDateCreated',
        'documents': 'documents'
    }

    def __init__(self, id=None, title=None, details=None, created_by_user_id=None, utc_date_created=None, documents=None):  # noqa: E501
        """NoteDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._details = None
        self._created_by_user_id = None
        self._utc_date_created = None
        self._documents = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if details is not None:
            self.details = details
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if utc_date_created is not None:
            self.utc_date_created = utc_date_created
        if documents is not None:
            self.documents = documents

    @property
    def id(self):
        """Gets the id of this NoteDto.  # noqa: E501

        The unique identifier for the note in the Authenticate platform  # noqa: E501

        :return: The id of this NoteDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteDto.

        The unique identifier for the note in the Authenticate platform  # noqa: E501

        :param id: The id of this NoteDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this NoteDto.  # noqa: E501

        The note title  # noqa: E501

        :return: The title of this NoteDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NoteDto.

        The note title  # noqa: E501

        :param title: The title of this NoteDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def details(self):
        """Gets the details of this NoteDto.  # noqa: E501

        The note details  # noqa: E501

        :return: The details of this NoteDto.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this NoteDto.

        The note details  # noqa: E501

        :param details: The details of this NoteDto.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this NoteDto.  # noqa: E501

        The unique identifier of the user who created the note  # noqa: E501

        :return: The created_by_user_id of this NoteDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this NoteDto.

        The unique identifier of the user who created the note  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this NoteDto.  # noqa: E501
        :type: str
        """

        self._created_by_user_id = created_by_user_id

    @property
    def utc_date_created(self):
        """Gets the utc_date_created of this NoteDto.  # noqa: E501

        The date and time the note was created  # noqa: E501

        :return: The utc_date_created of this NoteDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_date_created

    @utc_date_created.setter
    def utc_date_created(self, utc_date_created):
        """Sets the utc_date_created of this NoteDto.

        The date and time the note was created  # noqa: E501

        :param utc_date_created: The utc_date_created of this NoteDto.  # noqa: E501
        :type: datetime
        """

        self._utc_date_created = utc_date_created

    @property
    def documents(self):
        """Gets the documents of this NoteDto.  # noqa: E501

        Documents associated with the note  # noqa: E501

        :return: The documents of this NoteDto.  # noqa: E501
        :rtype: list[DocumentDto]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this NoteDto.

        Documents associated with the note  # noqa: E501

        :param documents: The documents of this NoteDto.  # noqa: E501
        :type: list[DocumentDto]
        """

        self._documents = documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
