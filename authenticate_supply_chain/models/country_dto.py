# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CountryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'code': 'str',
        'short_code': 'str',
        'regions': 'list[RegionDto]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'short_code': 'shortCode',
        'regions': 'regions'
    }

    def __init__(self, id=None, name=None, code=None, short_code=None, regions=None):  # noqa: E501
        """CountryDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._code = None
        self._short_code = None
        self._regions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if short_code is not None:
            self.short_code = short_code
        if regions is not None:
            self.regions = regions

    @property
    def id(self):
        """Gets the id of this CountryDto.  # noqa: E501

        The unique identifier for the country in the Authenticate platform  # noqa: E501

        :return: The id of this CountryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CountryDto.

        The unique identifier for the country in the Authenticate platform  # noqa: E501

        :param id: The id of this CountryDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CountryDto.  # noqa: E501

        The country Name  # noqa: E501

        :return: The name of this CountryDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountryDto.

        The country Name  # noqa: E501

        :param name: The name of this CountryDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this CountryDto.  # noqa: E501

        The three letter country code utilised in the Authenticate platform  # noqa: E501

        :return: The code of this CountryDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CountryDto.

        The three letter country code utilised in the Authenticate platform  # noqa: E501

        :param code: The code of this CountryDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def short_code(self):
        """Gets the short_code of this CountryDto.  # noqa: E501

        The two letter country code used in the Authenticate platform  # noqa: E501

        :return: The short_code of this CountryDto.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this CountryDto.

        The two letter country code used in the Authenticate platform  # noqa: E501

        :param short_code: The short_code of this CountryDto.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def regions(self):
        """Gets the regions of this CountryDto.  # noqa: E501

        A List of the country sub-divisions within the Authenticate platform  # noqa: E501

        :return: The regions of this CountryDto.  # noqa: E501
        :rtype: list[RegionDto]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this CountryDto.

        A List of the country sub-divisions within the Authenticate platform  # noqa: E501

        :param regions: The regions of this CountryDto.  # noqa: E501
        :type: list[RegionDto]
        """

        self._regions = regions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
