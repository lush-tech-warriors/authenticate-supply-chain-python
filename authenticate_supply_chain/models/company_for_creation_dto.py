# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyForCreationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_farm': 'bool',
        'address_line1': 'str',
        'city': 'str',
        'postcode': 'str',
        'country_name': 'str',
        'region_name': 'str',
        'contact_first_name': 'str',
        'contact_last_name': 'str',
        'contact_email_address': 'str',
        'primary_ons_company_type': 'str',
        'site_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'is_farm': 'isFarm',
        'address_line1': 'addressLine1',
        'city': 'city',
        'postcode': 'postcode',
        'country_name': 'countryName',
        'region_name': 'regionName',
        'contact_first_name': 'contactFirstName',
        'contact_last_name': 'contactLastName',
        'contact_email_address': 'contactEmailAddress',
        'primary_ons_company_type': 'primaryOnsCompanyType',
        'site_name': 'siteName'
    }

    def __init__(self, name=None, is_farm=None, address_line1=None, city=None, postcode=None, country_name=None, region_name=None, contact_first_name=None, contact_last_name=None, contact_email_address=None, primary_ons_company_type=None, site_name=None):  # noqa: E501
        """CompanyForCreationDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._is_farm = None
        self._address_line1 = None
        self._city = None
        self._postcode = None
        self._country_name = None
        self._region_name = None
        self._contact_first_name = None
        self._contact_last_name = None
        self._contact_email_address = None
        self._primary_ons_company_type = None
        self._site_name = None
        self.discriminator = None
        self.name = name
        self.is_farm = is_farm
        self.address_line1 = address_line1
        self.city = city
        if postcode is not None:
            self.postcode = postcode
        self.country_name = country_name
        self.region_name = region_name
        self.contact_first_name = contact_first_name
        self.contact_last_name = contact_last_name
        self.contact_email_address = contact_email_address
        if primary_ons_company_type is not None:
            self.primary_ons_company_type = primary_ons_company_type
        if site_name is not None:
            self.site_name = site_name

    @property
    def name(self):
        """Gets the name of this CompanyForCreationDto.  # noqa: E501

        The company name    Company names must be unique in the Authenticate platform, please use the company's official registered name  # noqa: E501

        :return: The name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyForCreationDto.

        The company name    Company names must be unique in the Authenticate platform, please use the company's official registered name  # noqa: E501

        :param name: The name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_farm(self):
        """Gets the is_farm of this CompanyForCreationDto.  # noqa: E501

        Is the company a farm?  # noqa: E501

        :return: The is_farm of this CompanyForCreationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_farm

    @is_farm.setter
    def is_farm(self, is_farm):
        """Sets the is_farm of this CompanyForCreationDto.

        Is the company a farm?  # noqa: E501

        :param is_farm: The is_farm of this CompanyForCreationDto.  # noqa: E501
        :type: bool
        """
        if is_farm is None:
            raise ValueError("Invalid value for `is_farm`, must not be `None`")  # noqa: E501

        self._is_farm = is_farm

    @property
    def address_line1(self):
        """Gets the address_line1 of this CompanyForCreationDto.  # noqa: E501

        The first line of the postal address  # noqa: E501

        :return: The address_line1 of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CompanyForCreationDto.

        The first line of the postal address  # noqa: E501

        :param address_line1: The address_line1 of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def city(self):
        """Gets the city of this CompanyForCreationDto.  # noqa: E501

        The city of the postal address  # noqa: E501

        :return: The city of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CompanyForCreationDto.

        The city of the postal address  # noqa: E501

        :param city: The city of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def postcode(self):
        """Gets the postcode of this CompanyForCreationDto.  # noqa: E501

        The postcode / zipcode  # noqa: E501

        :return: The postcode of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CompanyForCreationDto.

        The postcode / zipcode  # noqa: E501

        :param postcode: The postcode of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def country_name(self):
        """Gets the country_name of this CompanyForCreationDto.  # noqa: E501

        The Country.    Must match a country in the Authenticate platform  # noqa: E501

        :return: The country_name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CompanyForCreationDto.

        The Country.    Must match a country in the Authenticate platform  # noqa: E501

        :param country_name: The country_name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if country_name is None:
            raise ValueError("Invalid value for `country_name`, must not be `None`")  # noqa: E501

        self._country_name = country_name

    @property
    def region_name(self):
        """Gets the region_name of this CompanyForCreationDto.  # noqa: E501

        The country region / subdivision  Must match a region of the supplied country in the Authenticate platform  # noqa: E501

        :return: The region_name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this CompanyForCreationDto.

        The country region / subdivision  Must match a region of the supplied country in the Authenticate platform  # noqa: E501

        :param region_name: The region_name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if region_name is None:
            raise ValueError("Invalid value for `region_name`, must not be `None`")  # noqa: E501

        self._region_name = region_name

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this CompanyForCreationDto.  # noqa: E501

        The first name of a company contact  # noqa: E501

        :return: The contact_first_name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this CompanyForCreationDto.

        The first name of a company contact  # noqa: E501

        :param contact_first_name: The contact_first_name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if contact_first_name is None:
            raise ValueError("Invalid value for `contact_first_name`, must not be `None`")  # noqa: E501

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this CompanyForCreationDto.  # noqa: E501

        The last name of a company contact  # noqa: E501

        :return: The contact_last_name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this CompanyForCreationDto.

        The last name of a company contact  # noqa: E501

        :param contact_last_name: The contact_last_name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if contact_last_name is None:
            raise ValueError("Invalid value for `contact_last_name`, must not be `None`")  # noqa: E501

        self._contact_last_name = contact_last_name

    @property
    def contact_email_address(self):
        """Gets the contact_email_address of this CompanyForCreationDto.  # noqa: E501

        The email address of a company contact  # noqa: E501

        :return: The contact_email_address of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._contact_email_address

    @contact_email_address.setter
    def contact_email_address(self, contact_email_address):
        """Sets the contact_email_address of this CompanyForCreationDto.

        The email address of a company contact  # noqa: E501

        :param contact_email_address: The contact_email_address of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """
        if contact_email_address is None:
            raise ValueError("Invalid value for `contact_email_address`, must not be `None`")  # noqa: E501

        self._contact_email_address = contact_email_address

    @property
    def primary_ons_company_type(self):
        """Gets the primary_ons_company_type of this CompanyForCreationDto.  # noqa: E501

        The primary Ons Company Type of the company  # noqa: E501

        :return: The primary_ons_company_type of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._primary_ons_company_type

    @primary_ons_company_type.setter
    def primary_ons_company_type(self, primary_ons_company_type):
        """Sets the primary_ons_company_type of this CompanyForCreationDto.

        The primary Ons Company Type of the company  # noqa: E501

        :param primary_ons_company_type: The primary_ons_company_type of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """

        self._primary_ons_company_type = primary_ons_company_type

    @property
    def site_name(self):
        """Gets the site_name of this CompanyForCreationDto.  # noqa: E501

        An optional site name  # noqa: E501

        :return: The site_name of this CompanyForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this CompanyForCreationDto.

        An optional site name  # noqa: E501

        :param site_name: The site_name of this CompanyForCreationDto.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyForCreationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyForCreationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
