# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CategoryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parent_id': 'str',
        'parent_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parent_id': 'parentId',
        'parent_name': 'parentName'
    }

    def __init__(self, id=None, name=None, parent_id=None, parent_name=None):  # noqa: E501
        """CategoryDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._parent_id = None
        self._parent_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_name is not None:
            self.parent_name = parent_name

    @property
    def id(self):
        """Gets the id of this CategoryDto.  # noqa: E501

        The unique identifier of the category within the Authenticate platform  # noqa: E501

        :return: The id of this CategoryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryDto.

        The unique identifier of the category within the Authenticate platform  # noqa: E501

        :param id: The id of this CategoryDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CategoryDto.  # noqa: E501

        The category name  # noqa: E501

        :return: The name of this CategoryDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryDto.

        The category name  # noqa: E501

        :param name: The name of this CategoryDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CategoryDto.  # noqa: E501

        The unique identifier of the parent category. Null if there is no parent category  # noqa: E501

        :return: The parent_id of this CategoryDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CategoryDto.

        The unique identifier of the parent category. Null if there is no parent category  # noqa: E501

        :param parent_id: The parent_id of this CategoryDto.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_name(self):
        """Gets the parent_name of this CategoryDto.  # noqa: E501

        The name of the parent category. Null if there is not parent category  # noqa: E501

        :return: The parent_name of this CategoryDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this CategoryDto.

        The name of the parent category. Null if there is not parent category  # noqa: E501

        :param parent_name: The parent_name of this CategoryDto.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
