# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'company_id': 'str',
        'company_name': 'str',
        'address': 'AddressDto',
        'supplier_codes': 'list[SupplierCodeDto]',
        'site_operations': 'list[OnsSiteOperationDto]',
        'company_site_name': 'str',
        'primary_site': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'company_id': 'companyId',
        'company_name': 'companyName',
        'address': 'address',
        'supplier_codes': 'supplierCodes',
        'site_operations': 'siteOperations',
        'company_site_name': 'companySiteName',
        'primary_site': 'primarySite'
    }

    def __init__(self, id=None, name=None, company_id=None, company_name=None, address=None, supplier_codes=None, site_operations=None, company_site_name=None, primary_site=None):  # noqa: E501
        """SiteDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._company_id = None
        self._company_name = None
        self._address = None
        self._supplier_codes = None
        self._site_operations = None
        self._company_site_name = None
        self._primary_site = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if company_id is not None:
            self.company_id = company_id
        if company_name is not None:
            self.company_name = company_name
        if address is not None:
            self.address = address
        if supplier_codes is not None:
            self.supplier_codes = supplier_codes
        if site_operations is not None:
            self.site_operations = site_operations
        if company_site_name is not None:
            self.company_site_name = company_site_name
        if primary_site is not None:
            self.primary_site = primary_site

    @property
    def id(self):
        """Gets the id of this SiteDto.  # noqa: E501

        The unique identifier for the site in the Authenticate platform  # noqa: E501

        :return: The id of this SiteDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteDto.

        The unique identifier for the site in the Authenticate platform  # noqa: E501

        :param id: The id of this SiteDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SiteDto.  # noqa: E501

        The Site Name  # noqa: E501

        :return: The name of this SiteDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteDto.

        The Site Name  # noqa: E501

        :param name: The name of this SiteDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company_id(self):
        """Gets the company_id of this SiteDto.  # noqa: E501

        The unique identifier for the owning company in the Authenticate platform  # noqa: E501

        :return: The company_id of this SiteDto.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this SiteDto.

        The unique identifier for the owning company in the Authenticate platform  # noqa: E501

        :param company_id: The company_id of this SiteDto.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this SiteDto.  # noqa: E501

        The name of the company to which the site belongs  # noqa: E501

        :return: The company_name of this SiteDto.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SiteDto.

        The name of the company to which the site belongs  # noqa: E501

        :param company_name: The company_name of this SiteDto.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def address(self):
        """Gets the address of this SiteDto.  # noqa: E501


        :return: The address of this SiteDto.  # noqa: E501
        :rtype: AddressDto
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SiteDto.


        :param address: The address of this SiteDto.  # noqa: E501
        :type: AddressDto
        """

        self._address = address

    @property
    def supplier_codes(self):
        """Gets the supplier_codes of this SiteDto.  # noqa: E501

        One or more codes, assigned by you, that uniquely identify this site.  # noqa: E501

        :return: The supplier_codes of this SiteDto.  # noqa: E501
        :rtype: list[SupplierCodeDto]
        """
        return self._supplier_codes

    @supplier_codes.setter
    def supplier_codes(self, supplier_codes):
        """Sets the supplier_codes of this SiteDto.

        One or more codes, assigned by you, that uniquely identify this site.  # noqa: E501

        :param supplier_codes: The supplier_codes of this SiteDto.  # noqa: E501
        :type: list[SupplierCodeDto]
        """

        self._supplier_codes = supplier_codes

    @property
    def site_operations(self):
        """Gets the site_operations of this SiteDto.  # noqa: E501

        none or more ONS site Operations  # noqa: E501

        :return: The site_operations of this SiteDto.  # noqa: E501
        :rtype: list[OnsSiteOperationDto]
        """
        return self._site_operations

    @site_operations.setter
    def site_operations(self, site_operations):
        """Sets the site_operations of this SiteDto.

        none or more ONS site Operations  # noqa: E501

        :param site_operations: The site_operations of this SiteDto.  # noqa: E501
        :type: list[OnsSiteOperationDto]
        """

        self._site_operations = site_operations

    @property
    def company_site_name(self):
        """Gets the company_site_name of this SiteDto.  # noqa: E501

        Company and site name display property. If the company name matches the site name return just the company name,  otherwise return company name | site name  # noqa: E501

        :return: The company_site_name of this SiteDto.  # noqa: E501
        :rtype: str
        """
        return self._company_site_name

    @company_site_name.setter
    def company_site_name(self, company_site_name):
        """Sets the company_site_name of this SiteDto.

        Company and site name display property. If the company name matches the site name return just the company name,  otherwise return company name | site name  # noqa: E501

        :param company_site_name: The company_site_name of this SiteDto.  # noqa: E501
        :type: str
        """

        self._company_site_name = company_site_name

    @property
    def primary_site(self):
        """Gets the primary_site of this SiteDto.  # noqa: E501

        Indicates whether the site is the primary site  # noqa: E501

        :return: The primary_site of this SiteDto.  # noqa: E501
        :rtype: bool
        """
        return self._primary_site

    @primary_site.setter
    def primary_site(self, primary_site):
        """Sets the primary_site of this SiteDto.

        Indicates whether the site is the primary site  # noqa: E501

        :param primary_site: The primary_site of this SiteDto.  # noqa: E501
        :type: bool
        """

        self._primary_site = primary_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
