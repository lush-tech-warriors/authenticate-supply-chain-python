# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineStatusDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'ProductLineStatusEnum',
        'utc_date_created': 'datetime'
    }

    attribute_map = {
        'status': 'status',
        'utc_date_created': 'utcDateCreated'
    }

    def __init__(self, status=None, utc_date_created=None):  # noqa: E501
        """ProductLineStatusDto - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._utc_date_created = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if utc_date_created is not None:
            self.utc_date_created = utc_date_created

    @property
    def status(self):
        """Gets the status of this ProductLineStatusDto.  # noqa: E501


        :return: The status of this ProductLineStatusDto.  # noqa: E501
        :rtype: ProductLineStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductLineStatusDto.


        :param status: The status of this ProductLineStatusDto.  # noqa: E501
        :type: ProductLineStatusEnum
        """

        self._status = status

    @property
    def utc_date_created(self):
        """Gets the utc_date_created of this ProductLineStatusDto.  # noqa: E501

        UTC date created  # noqa: E501

        :return: The utc_date_created of this ProductLineStatusDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_date_created

    @utc_date_created.setter
    def utc_date_created(self, utc_date_created):
        """Sets the utc_date_created of this ProductLineStatusDto.

        UTC date created  # noqa: E501

        :param utc_date_created: The utc_date_created of this ProductLineStatusDto.  # noqa: E501
        :type: datetime
        """

        self._utc_date_created = utc_date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineStatusDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineStatusDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
