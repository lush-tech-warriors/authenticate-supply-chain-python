# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CountryEsgScoreDetailDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'name': 'str',
        'unit': 'str',
        'source': 'str',
        'currency': 'str',
        'frequency': 'str',
        'description': 'str',
        'last_updated': 'str',
        'last_updated_date': 'datetime',
        'risk_points': 'int',
        'maximum_risk_points': 'int',
        'score': 'str',
        'thresholds': 'list[CountryEsgScoreThresholdDto]'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'unit': 'unit',
        'source': 'source',
        'currency': 'currency',
        'frequency': 'frequency',
        'description': 'description',
        'last_updated': 'lastUpdated',
        'last_updated_date': 'lastUpdatedDate',
        'risk_points': 'riskPoints',
        'maximum_risk_points': 'maximumRiskPoints',
        'score': 'score',
        'thresholds': 'thresholds'
    }

    def __init__(self, url=None, name=None, unit=None, source=None, currency=None, frequency=None, description=None, last_updated=None, last_updated_date=None, risk_points=None, maximum_risk_points=None, score=None, thresholds=None):  # noqa: E501
        """CountryEsgScoreDetailDto - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._name = None
        self._unit = None
        self._source = None
        self._currency = None
        self._frequency = None
        self._description = None
        self._last_updated = None
        self._last_updated_date = None
        self._risk_points = None
        self._maximum_risk_points = None
        self._score = None
        self._thresholds = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if unit is not None:
            self.unit = unit
        if source is not None:
            self.source = source
        if currency is not None:
            self.currency = currency
        if frequency is not None:
            self.frequency = frequency
        if description is not None:
            self.description = description
        if last_updated is not None:
            self.last_updated = last_updated
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if risk_points is not None:
            self.risk_points = risk_points
        if maximum_risk_points is not None:
            self.maximum_risk_points = maximum_risk_points
        if score is not None:
            self.score = score
        if thresholds is not None:
            self.thresholds = thresholds

    @property
    def url(self):
        """Gets the url of this CountryEsgScoreDetailDto.  # noqa: E501

        URl of the resource that generated the score  # noqa: E501

        :return: The url of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CountryEsgScoreDetailDto.

        URl of the resource that generated the score  # noqa: E501

        :param url: The url of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this CountryEsgScoreDetailDto.  # noqa: E501

        Name of the resource that generated the score  # noqa: E501

        :return: The name of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountryEsgScoreDetailDto.

        Name of the resource that generated the score  # noqa: E501

        :param name: The name of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this CountryEsgScoreDetailDto.  # noqa: E501

        Unit of the score if applicable  # noqa: E501

        :return: The unit of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CountryEsgScoreDetailDto.

        Unit of the score if applicable  # noqa: E501

        :param unit: The unit of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def source(self):
        """Gets the source of this CountryEsgScoreDetailDto.  # noqa: E501

        Name of the source of the data that generated the score  # noqa: E501

        :return: The source of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CountryEsgScoreDetailDto.

        Name of the source of the data that generated the score  # noqa: E501

        :param source: The source of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def currency(self):
        """Gets the currency of this CountryEsgScoreDetailDto.  # noqa: E501

        Currency fo the data if applicable  # noqa: E501

        :return: The currency of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CountryEsgScoreDetailDto.

        Currency fo the data if applicable  # noqa: E501

        :param currency: The currency of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def frequency(self):
        """Gets the frequency of this CountryEsgScoreDetailDto.  # noqa: E501

        Frequency of the acquisition of the data  # noqa: E501

        :return: The frequency of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this CountryEsgScoreDetailDto.

        Frequency of the acquisition of the data  # noqa: E501

        :param frequency: The frequency of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def description(self):
        """Gets the description of this CountryEsgScoreDetailDto.  # noqa: E501

        Description of the resource  # noqa: E501

        :return: The description of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CountryEsgScoreDetailDto.

        Description of the resource  # noqa: E501

        :param description: The description of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_updated(self):
        """Gets the last_updated of this CountryEsgScoreDetailDto.  # noqa: E501

        Optional last updated text  # noqa: E501

        :return: The last_updated of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CountryEsgScoreDetailDto.

        Optional last updated text  # noqa: E501

        :param last_updated: The last_updated of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this CountryEsgScoreDetailDto.  # noqa: E501

        The date the data was last updated  # noqa: E501

        :return: The last_updated_date of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this CountryEsgScoreDetailDto.

        The date the data was last updated  # noqa: E501

        :param last_updated_date: The last_updated_date of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def risk_points(self):
        """Gets the risk_points of this CountryEsgScoreDetailDto.  # noqa: E501

        The Score Risk  # noqa: E501

        :return: The risk_points of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: int
        """
        return self._risk_points

    @risk_points.setter
    def risk_points(self, risk_points):
        """Sets the risk_points of this CountryEsgScoreDetailDto.

        The Score Risk  # noqa: E501

        :param risk_points: The risk_points of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: int
        """

        self._risk_points = risk_points

    @property
    def maximum_risk_points(self):
        """Gets the maximum_risk_points of this CountryEsgScoreDetailDto.  # noqa: E501

        The maximum risk for this score  # noqa: E501

        :return: The maximum_risk_points of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: int
        """
        return self._maximum_risk_points

    @maximum_risk_points.setter
    def maximum_risk_points(self, maximum_risk_points):
        """Sets the maximum_risk_points of this CountryEsgScoreDetailDto.

        The maximum risk for this score  # noqa: E501

        :param maximum_risk_points: The maximum_risk_points of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: int
        """

        self._maximum_risk_points = maximum_risk_points

    @property
    def score(self):
        """Gets the score of this CountryEsgScoreDetailDto.  # noqa: E501

        The Score for the score  # noqa: E501

        :return: The score of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CountryEsgScoreDetailDto.

        The Score for the score  # noqa: E501

        :param score: The score of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def thresholds(self):
        """Gets the thresholds of this CountryEsgScoreDetailDto.  # noqa: E501

        Thresholds associated with this score.  # noqa: E501

        :return: The thresholds of this CountryEsgScoreDetailDto.  # noqa: E501
        :rtype: list[CountryEsgScoreThresholdDto]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this CountryEsgScoreDetailDto.

        Thresholds associated with this score.  # noqa: E501

        :param thresholds: The thresholds of this CountryEsgScoreDetailDto.  # noqa: E501
        :type: list[CountryEsgScoreThresholdDto]
        """

        self._thresholds = thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountryEsgScoreDetailDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryEsgScoreDetailDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
