# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'scheme_type': 'str',
        'scheme_name': 'str',
        'certification_body': 'str',
        'scheme_certificate_id': 'str',
        'status': 'str',
        'scope': 'str',
        'grade': 'str',
        'end_date': 'datetime',
        'last_found_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'scheme_type': 'schemeType',
        'scheme_name': 'schemeName',
        'certification_body': 'certificationBody',
        'scheme_certificate_id': 'schemeCertificateId',
        'status': 'status',
        'scope': 'scope',
        'grade': 'grade',
        'end_date': 'endDate',
        'last_found_date': 'lastFoundDate'
    }

    def __init__(self, id=None, scheme_type=None, scheme_name=None, certification_body=None, scheme_certificate_id=None, status=None, scope=None, grade=None, end_date=None, last_found_date=None):  # noqa: E501
        """CertificateDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._scheme_type = None
        self._scheme_name = None
        self._certification_body = None
        self._scheme_certificate_id = None
        self._status = None
        self._scope = None
        self._grade = None
        self._end_date = None
        self._last_found_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if scheme_type is not None:
            self.scheme_type = scheme_type
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if certification_body is not None:
            self.certification_body = certification_body
        if scheme_certificate_id is not None:
            self.scheme_certificate_id = scheme_certificate_id
        if status is not None:
            self.status = status
        if scope is not None:
            self.scope = scope
        if grade is not None:
            self.grade = grade
        if end_date is not None:
            self.end_date = end_date
        if last_found_date is not None:
            self.last_found_date = last_found_date

    @property
    def id(self):
        """Gets the id of this CertificateDto.  # noqa: E501

        The unique identifier for the certificate in the Authenticate platform  # noqa: E501

        :return: The id of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateDto.

        The unique identifier for the certificate in the Authenticate platform  # noqa: E501

        :param id: The id of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scheme_type(self):
        """Gets the scheme_type of this CertificateDto.  # noqa: E501

        The scheme type  # noqa: E501

        :return: The scheme_type of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._scheme_type

    @scheme_type.setter
    def scheme_type(self, scheme_type):
        """Sets the scheme_type of this CertificateDto.

        The scheme type  # noqa: E501

        :param scheme_type: The scheme_type of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._scheme_type = scheme_type

    @property
    def scheme_name(self):
        """Gets the scheme_name of this CertificateDto.  # noqa: E501

        The certificate scheme  # noqa: E501

        :return: The scheme_name of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this CertificateDto.

        The certificate scheme  # noqa: E501

        :param scheme_name: The scheme_name of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._scheme_name = scheme_name

    @property
    def certification_body(self):
        """Gets the certification_body of this CertificateDto.  # noqa: E501

        The certification body name  # noqa: E501

        :return: The certification_body of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._certification_body

    @certification_body.setter
    def certification_body(self, certification_body):
        """Sets the certification_body of this CertificateDto.

        The certification body name  # noqa: E501

        :param certification_body: The certification_body of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._certification_body = certification_body

    @property
    def scheme_certificate_id(self):
        """Gets the scheme_certificate_id of this CertificateDto.  # noqa: E501

        The scheme specific Id for the certificate  # noqa: E501

        :return: The scheme_certificate_id of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._scheme_certificate_id

    @scheme_certificate_id.setter
    def scheme_certificate_id(self, scheme_certificate_id):
        """Sets the scheme_certificate_id of this CertificateDto.

        The scheme specific Id for the certificate  # noqa: E501

        :param scheme_certificate_id: The scheme_certificate_id of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._scheme_certificate_id = scheme_certificate_id

    @property
    def status(self):
        """Gets the status of this CertificateDto.  # noqa: E501

        The certificate status  # noqa: E501

        :return: The status of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateDto.

        The certificate status  # noqa: E501

        :param status: The status of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def scope(self):
        """Gets the scope of this CertificateDto.  # noqa: E501

        The certificate scope  # noqa: E501

        :return: The scope of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CertificateDto.

        The certificate scope  # noqa: E501

        :param scope: The scope of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def grade(self):
        """Gets the grade of this CertificateDto.  # noqa: E501

        The certificate grade  # noqa: E501

        :return: The grade of this CertificateDto.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this CertificateDto.

        The certificate grade  # noqa: E501

        :param grade: The grade of this CertificateDto.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def end_date(self):
        """Gets the end_date of this CertificateDto.  # noqa: E501

        Certificate end date  # noqa: E501

        :return: The end_date of this CertificateDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CertificateDto.

        Certificate end date  # noqa: E501

        :param end_date: The end_date of this CertificateDto.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def last_found_date(self):
        """Gets the last_found_date of this CertificateDto.  # noqa: E501

        An indication of when the certificate was last validated  # noqa: E501

        :return: The last_found_date of this CertificateDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_found_date

    @last_found_date.setter
    def last_found_date(self, last_found_date):
        """Sets the last_found_date of this CertificateDto.

        An indication of when the certificate was last validated  # noqa: E501

        :param last_found_date: The last_found_date of this CertificateDto.  # noqa: E501
        :type: datetime
        """

        self._last_found_date = last_found_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
