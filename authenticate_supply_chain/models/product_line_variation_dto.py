# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineVariationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'product_line_id': 'str',
        'language': 'str',
        'name': 'str',
        'sku': 'str',
        'pack_size': 'str',
        'legal_name': 'str',
        'utc_date_created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'product_line_id': 'productLineId',
        'language': 'language',
        'name': 'name',
        'sku': 'sku',
        'pack_size': 'packSize',
        'legal_name': 'legalName',
        'utc_date_created': 'utcDateCreated'
    }

    def __init__(self, id=None, product_line_id=None, language=None, name=None, sku=None, pack_size=None, legal_name=None, utc_date_created=None):  # noqa: E501
        """ProductLineVariationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_line_id = None
        self._language = None
        self._name = None
        self._sku = None
        self._pack_size = None
        self._legal_name = None
        self._utc_date_created = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if product_line_id is not None:
            self.product_line_id = product_line_id
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if sku is not None:
            self.sku = sku
        if pack_size is not None:
            self.pack_size = pack_size
        if legal_name is not None:
            self.legal_name = legal_name
        if utc_date_created is not None:
            self.utc_date_created = utc_date_created

    @property
    def id(self):
        """Gets the id of this ProductLineVariationDto.  # noqa: E501

        The unique identifier of the product variation within the Authenticate platform  # noqa: E501

        :return: The id of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLineVariationDto.

        The unique identifier of the product variation within the Authenticate platform  # noqa: E501

        :param id: The id of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product_line_id(self):
        """Gets the product_line_id of this ProductLineVariationDto.  # noqa: E501

        The unique identifier of the product within the Authenticate platform to which the variation is associated  # noqa: E501

        :return: The product_line_id of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line_id

    @product_line_id.setter
    def product_line_id(self, product_line_id):
        """Sets the product_line_id of this ProductLineVariationDto.

        The unique identifier of the product within the Authenticate platform to which the variation is associated  # noqa: E501

        :param product_line_id: The product_line_id of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._product_line_id = product_line_id

    @property
    def language(self):
        """Gets the language of this ProductLineVariationDto.  # noqa: E501

        The language associated with the variation  # noqa: E501

        :return: The language of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ProductLineVariationDto.

        The language associated with the variation  # noqa: E501

        :param language: The language of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this ProductLineVariationDto.  # noqa: E501

        The name associated with the variation  # noqa: E501

        :return: The name of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductLineVariationDto.

        The name associated with the variation  # noqa: E501

        :param name: The name of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this ProductLineVariationDto.  # noqa: E501

        The SKU  associated with the variation  # noqa: E501

        :return: The sku of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductLineVariationDto.

        The SKU  associated with the variation  # noqa: E501

        :param sku: The sku of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def pack_size(self):
        """Gets the pack_size of this ProductLineVariationDto.  # noqa: E501

        The pack size associated with the variation  # noqa: E501

        :return: The pack_size of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._pack_size

    @pack_size.setter
    def pack_size(self, pack_size):
        """Sets the pack_size of this ProductLineVariationDto.

        The pack size associated with the variation  # noqa: E501

        :param pack_size: The pack_size of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._pack_size = pack_size

    @property
    def legal_name(self):
        """Gets the legal_name of this ProductLineVariationDto.  # noqa: E501

        The legal name associated with the variation  # noqa: E501

        :return: The legal_name of this ProductLineVariationDto.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this ProductLineVariationDto.

        The legal name associated with the variation  # noqa: E501

        :param legal_name: The legal_name of this ProductLineVariationDto.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def utc_date_created(self):
        """Gets the utc_date_created of this ProductLineVariationDto.  # noqa: E501

        The date and time the variation was created  # noqa: E501

        :return: The utc_date_created of this ProductLineVariationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._utc_date_created

    @utc_date_created.setter
    def utc_date_created(self, utc_date_created):
        """Sets the utc_date_created of this ProductLineVariationDto.

        The date and time the variation was created  # noqa: E501

        :param utc_date_created: The utc_date_created of this ProductLineVariationDto.  # noqa: E501
        :type: datetime
        """

        self._utc_date_created = utc_date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineVariationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineVariationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
