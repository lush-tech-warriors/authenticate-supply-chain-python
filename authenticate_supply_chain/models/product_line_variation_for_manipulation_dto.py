# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineVariationForManipulationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'language': 'str',
        'sku': 'str',
        'pack_size': 'str',
        'legal_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'language': 'language',
        'sku': 'sku',
        'pack_size': 'packSize',
        'legal_name': 'legalName'
    }

    def __init__(self, name=None, language=None, sku=None, pack_size=None, legal_name=None):  # noqa: E501
        """ProductLineVariationForManipulationDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._language = None
        self._sku = None
        self._pack_size = None
        self._legal_name = None
        self.discriminator = None
        self.name = name
        self.language = language
        self.sku = sku
        if pack_size is not None:
            self.pack_size = pack_size
        if legal_name is not None:
            self.legal_name = legal_name

    @property
    def name(self):
        """Gets the name of this ProductLineVariationForManipulationDto.  # noqa: E501

        The name associated with the variation  # noqa: E501

        :return: The name of this ProductLineVariationForManipulationDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductLineVariationForManipulationDto.

        The name associated with the variation  # noqa: E501

        :param name: The name of this ProductLineVariationForManipulationDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def language(self):
        """Gets the language of this ProductLineVariationForManipulationDto.  # noqa: E501

        The language associated with the variation  # noqa: E501

        :return: The language of this ProductLineVariationForManipulationDto.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ProductLineVariationForManipulationDto.

        The language associated with the variation  # noqa: E501

        :param language: The language of this ProductLineVariationForManipulationDto.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def sku(self):
        """Gets the sku of this ProductLineVariationForManipulationDto.  # noqa: E501

        The SKU  associated with the variation  # noqa: E501

        :return: The sku of this ProductLineVariationForManipulationDto.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductLineVariationForManipulationDto.

        The SKU  associated with the variation  # noqa: E501

        :param sku: The sku of this ProductLineVariationForManipulationDto.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def pack_size(self):
        """Gets the pack_size of this ProductLineVariationForManipulationDto.  # noqa: E501

        The pack size associated with the variation  # noqa: E501

        :return: The pack_size of this ProductLineVariationForManipulationDto.  # noqa: E501
        :rtype: str
        """
        return self._pack_size

    @pack_size.setter
    def pack_size(self, pack_size):
        """Sets the pack_size of this ProductLineVariationForManipulationDto.

        The pack size associated with the variation  # noqa: E501

        :param pack_size: The pack_size of this ProductLineVariationForManipulationDto.  # noqa: E501
        :type: str
        """

        self._pack_size = pack_size

    @property
    def legal_name(self):
        """Gets the legal_name of this ProductLineVariationForManipulationDto.  # noqa: E501

        The legal name associated with the variation  # noqa: E501

        :return: The legal_name of this ProductLineVariationForManipulationDto.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this ProductLineVariationForManipulationDto.

        The legal name associated with the variation  # noqa: E501

        :param legal_name: The legal_name of this ProductLineVariationForManipulationDto.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineVariationForManipulationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineVariationForManipulationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
