# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactForCreationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'is_private': 'bool',
        'email': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'is_private': 'isPrivate',
        'email': 'email'
    }

    def __init__(self, first_name=None, last_name=None, is_private=None, email=None):  # noqa: E501
        """ContactForCreationDto - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._is_private = None
        self._email = None
        self.discriminator = None
        self.first_name = first_name
        self.last_name = last_name
        if is_private is not None:
            self.is_private = is_private
        self.email = email

    @property
    def first_name(self):
        """Gets the first_name of this ContactForCreationDto.  # noqa: E501

        The contact's first name  # noqa: E501

        :return: The first_name of this ContactForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactForCreationDto.

        The contact's first name  # noqa: E501

        :param first_name: The first_name of this ContactForCreationDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactForCreationDto.  # noqa: E501

        The contact's last name  # noqa: E501

        :return: The last_name of this ContactForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactForCreationDto.

        The contact's last name  # noqa: E501

        :param last_name: The last_name of this ContactForCreationDto.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def is_private(self):
        """Gets the is_private of this ContactForCreationDto.  # noqa: E501

        contact is private  # noqa: E501

        :return: The is_private of this ContactForCreationDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this ContactForCreationDto.

        contact is private  # noqa: E501

        :param is_private: The is_private of this ContactForCreationDto.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def email(self):
        """Gets the email of this ContactForCreationDto.  # noqa: E501

        The contact's email address.  # noqa: E501

        :return: The email of this ContactForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactForCreationDto.

        The contact's email address.  # noqa: E501

        :param email: The email of this ContactForCreationDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactForCreationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactForCreationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
