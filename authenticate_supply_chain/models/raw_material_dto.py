# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawMaterialDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'product_name': 'str',
        'reference': 'str',
        'created_by_company_id': 'str',
        'parent_company_id': 'str',
        'child_company_id': 'str',
        'raw_material_function_id': 'str',
        'dormant': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'product_name': 'productName',
        'reference': 'reference',
        'created_by_company_id': 'createdByCompanyId',
        'parent_company_id': 'parentCompanyId',
        'child_company_id': 'childCompanyId',
        'raw_material_function_id': 'rawMaterialFunctionId',
        'dormant': 'dormant'
    }

    def __init__(self, id=None, product_name=None, reference=None, created_by_company_id=None, parent_company_id=None, child_company_id=None, raw_material_function_id=None, dormant=None):  # noqa: E501
        """RawMaterialDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_name = None
        self._reference = None
        self._created_by_company_id = None
        self._parent_company_id = None
        self._child_company_id = None
        self._raw_material_function_id = None
        self._dormant = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if product_name is not None:
            self.product_name = product_name
        if reference is not None:
            self.reference = reference
        if created_by_company_id is not None:
            self.created_by_company_id = created_by_company_id
        if parent_company_id is not None:
            self.parent_company_id = parent_company_id
        if child_company_id is not None:
            self.child_company_id = child_company_id
        if raw_material_function_id is not None:
            self.raw_material_function_id = raw_material_function_id
        if dormant is not None:
            self.dormant = dormant

    @property
    def id(self):
        """Gets the id of this RawMaterialDto.  # noqa: E501

        The unique identifier of the raw material  # noqa: E501

        :return: The id of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RawMaterialDto.

        The unique identifier of the raw material  # noqa: E501

        :param id: The id of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product_name(self):
        """Gets the product_name of this RawMaterialDto.  # noqa: E501

        The product name of the raw material  # noqa: E501

        :return: The product_name of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this RawMaterialDto.

        The product name of the raw material  # noqa: E501

        :param product_name: The product_name of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def reference(self):
        """Gets the reference of this RawMaterialDto.  # noqa: E501

        The reference of the raw material  # noqa: E501

        :return: The reference of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RawMaterialDto.

        The reference of the raw material  # noqa: E501

        :param reference: The reference of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def created_by_company_id(self):
        """Gets the created_by_company_id of this RawMaterialDto.  # noqa: E501

        The unique identifier of the company that created the raw material  # noqa: E501

        :return: The created_by_company_id of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by_company_id

    @created_by_company_id.setter
    def created_by_company_id(self, created_by_company_id):
        """Sets the created_by_company_id of this RawMaterialDto.

        The unique identifier of the company that created the raw material  # noqa: E501

        :param created_by_company_id: The created_by_company_id of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._created_by_company_id = created_by_company_id

    @property
    def parent_company_id(self):
        """Gets the parent_company_id of this RawMaterialDto.  # noqa: E501

        The unique identifier of the company that receives the raw material  # noqa: E501

        :return: The parent_company_id of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_company_id

    @parent_company_id.setter
    def parent_company_id(self, parent_company_id):
        """Sets the parent_company_id of this RawMaterialDto.

        The unique identifier of the company that receives the raw material  # noqa: E501

        :param parent_company_id: The parent_company_id of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._parent_company_id = parent_company_id

    @property
    def child_company_id(self):
        """Gets the child_company_id of this RawMaterialDto.  # noqa: E501

        The unique identifier of the company that supplies the raw material  # noqa: E501

        :return: The child_company_id of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._child_company_id

    @child_company_id.setter
    def child_company_id(self, child_company_id):
        """Sets the child_company_id of this RawMaterialDto.

        The unique identifier of the company that supplies the raw material  # noqa: E501

        :param child_company_id: The child_company_id of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._child_company_id = child_company_id

    @property
    def raw_material_function_id(self):
        """Gets the raw_material_function_id of this RawMaterialDto.  # noqa: E501

        The unique identifier of the function associated with the raw material  # noqa: E501

        :return: The raw_material_function_id of this RawMaterialDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_material_function_id

    @raw_material_function_id.setter
    def raw_material_function_id(self, raw_material_function_id):
        """Sets the raw_material_function_id of this RawMaterialDto.

        The unique identifier of the function associated with the raw material  # noqa: E501

        :param raw_material_function_id: The raw_material_function_id of this RawMaterialDto.  # noqa: E501
        :type: str
        """

        self._raw_material_function_id = raw_material_function_id

    @property
    def dormant(self):
        """Gets the dormant of this RawMaterialDto.  # noqa: E501

        Indicates whether the product is dormant  # noqa: E501

        :return: The dormant of this RawMaterialDto.  # noqa: E501
        :rtype: bool
        """
        return self._dormant

    @dormant.setter
    def dormant(self, dormant):
        """Sets the dormant of this RawMaterialDto.

        Indicates whether the product is dormant  # noqa: E501

        :param dormant: The dormant of this RawMaterialDto.  # noqa: E501
        :type: bool
        """

        self._dormant = dormant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawMaterialDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawMaterialDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
