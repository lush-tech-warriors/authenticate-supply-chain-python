# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineCountryDeclarationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_ids': 'list[str]',
        'share_declared_countries_with_customers': 'bool',
        'id': 'str',
        'product_line_id': 'str',
        'product_link_id': 'str',
        'additional_information': 'str'
    }

    attribute_map = {
        'country_ids': 'countryIds',
        'share_declared_countries_with_customers': 'shareDeclaredCountriesWithCustomers',
        'id': 'id',
        'product_line_id': 'productLineId',
        'product_link_id': 'productLinkId',
        'additional_information': 'additionalInformation'
    }

    def __init__(self, country_ids=None, share_declared_countries_with_customers=None, id=None, product_line_id=None, product_link_id=None, additional_information=None):  # noqa: E501
        """ProductLineCountryDeclarationDto - a model defined in Swagger"""  # noqa: E501
        self._country_ids = None
        self._share_declared_countries_with_customers = None
        self._id = None
        self._product_line_id = None
        self._product_link_id = None
        self._additional_information = None
        self.discriminator = None
        if country_ids is not None:
            self.country_ids = country_ids
        if share_declared_countries_with_customers is not None:
            self.share_declared_countries_with_customers = share_declared_countries_with_customers
        if id is not None:
            self.id = id
        if product_line_id is not None:
            self.product_line_id = product_line_id
        if product_link_id is not None:
            self.product_link_id = product_link_id
        if additional_information is not None:
            self.additional_information = additional_information

    @property
    def country_ids(self):
        """Gets the country_ids of this ProductLineCountryDeclarationDto.  # noqa: E501

        The unique identifiers of specific countries declared against a product line  # noqa: E501

        :return: The country_ids of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_ids

    @country_ids.setter
    def country_ids(self, country_ids):
        """Sets the country_ids of this ProductLineCountryDeclarationDto.

        The unique identifiers of specific countries declared against a product line  # noqa: E501

        :param country_ids: The country_ids of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: list[str]
        """

        self._country_ids = country_ids

    @property
    def share_declared_countries_with_customers(self):
        """Gets the share_declared_countries_with_customers of this ProductLineCountryDeclarationDto.  # noqa: E501

        share product line declared countries with customers  # noqa: E501

        :return: The share_declared_countries_with_customers of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: bool
        """
        return self._share_declared_countries_with_customers

    @share_declared_countries_with_customers.setter
    def share_declared_countries_with_customers(self, share_declared_countries_with_customers):
        """Sets the share_declared_countries_with_customers of this ProductLineCountryDeclarationDto.

        share product line declared countries with customers  # noqa: E501

        :param share_declared_countries_with_customers: The share_declared_countries_with_customers of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: bool
        """

        self._share_declared_countries_with_customers = share_declared_countries_with_customers

    @property
    def id(self):
        """Gets the id of this ProductLineCountryDeclarationDto.  # noqa: E501

        The unique identifier of the country declaration against a product line  # noqa: E501

        :return: The id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLineCountryDeclarationDto.

        The unique identifier of the country declaration against a product line  # noqa: E501

        :param id: The id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product_line_id(self):
        """Gets the product_line_id of this ProductLineCountryDeclarationDto.  # noqa: E501

        The unique identifier of the product within the Authenticate platform  # noqa: E501

        :return: The product_line_id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line_id

    @product_line_id.setter
    def product_line_id(self, product_line_id):
        """Sets the product_line_id of this ProductLineCountryDeclarationDto.

        The unique identifier of the product within the Authenticate platform  # noqa: E501

        :param product_line_id: The product_line_id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: str
        """

        self._product_line_id = product_line_id

    @property
    def product_link_id(self):
        """Gets the product_link_id of this ProductLineCountryDeclarationDto.  # noqa: E501

        The unique identifier of the product link within the Authenticate platform  # noqa: E501

        :return: The product_link_id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_link_id

    @product_link_id.setter
    def product_link_id(self, product_link_id):
        """Sets the product_link_id of this ProductLineCountryDeclarationDto.

        The unique identifier of the product link within the Authenticate platform  # noqa: E501

        :param product_link_id: The product_link_id of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: str
        """

        self._product_link_id = product_link_id

    @property
    def additional_information(self):
        """Gets the additional_information of this ProductLineCountryDeclarationDto.  # noqa: E501

        Additional information for the country declaration against a product line  # noqa: E501

        :return: The additional_information of this ProductLineCountryDeclarationDto.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this ProductLineCountryDeclarationDto.

        Additional information for the country declaration against a product line  # noqa: E501

        :param additional_information: The additional_information of this ProductLineCountryDeclarationDto.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineCountryDeclarationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineCountryDeclarationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
