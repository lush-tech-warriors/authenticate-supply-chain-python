# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLineDocumentAssociationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product_line_id': 'str',
        'site_id': 'str',
        'supply_chain_link_id': 'str',
        'requested_document_id': 'int',
        'document_id': 'int',
        'supply_chain_snapshot_json': 'str'
    }

    attribute_map = {
        'id': 'id',
        'product_line_id': 'productLineId',
        'site_id': 'siteId',
        'supply_chain_link_id': 'supplyChainLinkId',
        'requested_document_id': 'requestedDocumentId',
        'document_id': 'documentId',
        'supply_chain_snapshot_json': 'supplyChainSnapshotJson'
    }

    def __init__(self, id=None, product_line_id=None, site_id=None, supply_chain_link_id=None, requested_document_id=None, document_id=None, supply_chain_snapshot_json=None):  # noqa: E501
        """ProductLineDocumentAssociationDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_line_id = None
        self._site_id = None
        self._supply_chain_link_id = None
        self._requested_document_id = None
        self._document_id = None
        self._supply_chain_snapshot_json = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.product_line_id = product_line_id
        self.site_id = site_id
        self.supply_chain_link_id = supply_chain_link_id
        self.requested_document_id = requested_document_id
        self.document_id = document_id
        self.supply_chain_snapshot_json = supply_chain_snapshot_json

    @property
    def id(self):
        """Gets the id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The unique identitifier for the product line document association.  # noqa: E501

        :return: The id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLineDocumentAssociationDto.

        The unique identitifier for the product line document association.  # noqa: E501

        :param id: The id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product_line_id(self):
        """Gets the product_line_id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The product line id.  # noqa: E501

        :return: The product_line_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line_id

    @product_line_id.setter
    def product_line_id(self, product_line_id):
        """Sets the product_line_id of this ProductLineDocumentAssociationDto.

        The product line id.  # noqa: E501

        :param product_line_id: The product_line_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: str
        """
        if product_line_id is None:
            raise ValueError("Invalid value for `product_line_id`, must not be `None`")  # noqa: E501

        self._product_line_id = product_line_id

    @property
    def site_id(self):
        """Gets the site_id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The site id.  # noqa: E501

        :return: The site_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ProductLineDocumentAssociationDto.

        The site id.  # noqa: E501

        :param site_id: The site_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: str
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def supply_chain_link_id(self):
        """Gets the supply_chain_link_id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The supply chain link id.  # noqa: E501

        :return: The supply_chain_link_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: str
        """
        return self._supply_chain_link_id

    @supply_chain_link_id.setter
    def supply_chain_link_id(self, supply_chain_link_id):
        """Sets the supply_chain_link_id of this ProductLineDocumentAssociationDto.

        The supply chain link id.  # noqa: E501

        :param supply_chain_link_id: The supply_chain_link_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: str
        """
        if supply_chain_link_id is None:
            raise ValueError("Invalid value for `supply_chain_link_id`, must not be `None`")  # noqa: E501

        self._supply_chain_link_id = supply_chain_link_id

    @property
    def requested_document_id(self):
        """Gets the requested_document_id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The requested document id.  # noqa: E501

        :return: The requested_document_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: int
        """
        return self._requested_document_id

    @requested_document_id.setter
    def requested_document_id(self, requested_document_id):
        """Sets the requested_document_id of this ProductLineDocumentAssociationDto.

        The requested document id.  # noqa: E501

        :param requested_document_id: The requested_document_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: int
        """
        if requested_document_id is None:
            raise ValueError("Invalid value for `requested_document_id`, must not be `None`")  # noqa: E501

        self._requested_document_id = requested_document_id

    @property
    def document_id(self):
        """Gets the document_id of this ProductLineDocumentAssociationDto.  # noqa: E501

        The document id.  # noqa: E501

        :return: The document_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this ProductLineDocumentAssociationDto.

        The document id.  # noqa: E501

        :param document_id: The document_id of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: int
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def supply_chain_snapshot_json(self):
        """Gets the supply_chain_snapshot_json of this ProductLineDocumentAssociationDto.  # noqa: E501

        A snapshot of the product line supply chain.  # noqa: E501

        :return: The supply_chain_snapshot_json of this ProductLineDocumentAssociationDto.  # noqa: E501
        :rtype: str
        """
        return self._supply_chain_snapshot_json

    @supply_chain_snapshot_json.setter
    def supply_chain_snapshot_json(self, supply_chain_snapshot_json):
        """Sets the supply_chain_snapshot_json of this ProductLineDocumentAssociationDto.

        A snapshot of the product line supply chain.  # noqa: E501

        :param supply_chain_snapshot_json: The supply_chain_snapshot_json of this ProductLineDocumentAssociationDto.  # noqa: E501
        :type: str
        """
        if supply_chain_snapshot_json is None:
            raise ValueError("Invalid value for `supply_chain_snapshot_json`, must not be `None`")  # noqa: E501

        self._supply_chain_snapshot_json = supply_chain_snapshot_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLineDocumentAssociationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLineDocumentAssociationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
