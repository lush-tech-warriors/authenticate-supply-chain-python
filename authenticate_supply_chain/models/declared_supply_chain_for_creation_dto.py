# coding: utf-8

"""
    Authenticate Platform Supply Chain API

    Through this API you can Manage products and suppliers. Access to this API is restricted to authenticated users. Before accessing this API, first authenticate via the \"Account\" API. (https://uat-account.authenticateis.com/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeclaredSupplyChainForCreationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_company_id': 'str',
        'child_company_id': 'str',
        'product_name': 'str',
        'product_reference': 'str',
        'parent_declared_supply_chain_id': 'str',
        'site_ids': 'list[str]',
        'customer_site_ids': 'list[str]',
        'parent_product_line_id': 'str',
        'raw_material_function_id': 'str'
    }

    attribute_map = {
        'parent_company_id': 'parentCompanyId',
        'child_company_id': 'childCompanyId',
        'product_name': 'productName',
        'product_reference': 'productReference',
        'parent_declared_supply_chain_id': 'parentDeclaredSupplyChainId',
        'site_ids': 'siteIds',
        'customer_site_ids': 'customerSiteIds',
        'parent_product_line_id': 'parentProductLineId',
        'raw_material_function_id': 'rawMaterialFunctionId'
    }

    def __init__(self, parent_company_id=None, child_company_id=None, product_name=None, product_reference=None, parent_declared_supply_chain_id=None, site_ids=None, customer_site_ids=None, parent_product_line_id=None, raw_material_function_id=None):  # noqa: E501
        """DeclaredSupplyChainForCreationDto - a model defined in Swagger"""  # noqa: E501
        self._parent_company_id = None
        self._child_company_id = None
        self._product_name = None
        self._product_reference = None
        self._parent_declared_supply_chain_id = None
        self._site_ids = None
        self._customer_site_ids = None
        self._parent_product_line_id = None
        self._raw_material_function_id = None
        self.discriminator = None
        self.parent_company_id = parent_company_id
        self.child_company_id = child_company_id
        self.product_name = product_name
        self.product_reference = product_reference
        if parent_declared_supply_chain_id is not None:
            self.parent_declared_supply_chain_id = parent_declared_supply_chain_id
        if site_ids is not None:
            self.site_ids = site_ids
        if customer_site_ids is not None:
            self.customer_site_ids = customer_site_ids
        if parent_product_line_id is not None:
            self.parent_product_line_id = parent_product_line_id
        if raw_material_function_id is not None:
            self.raw_material_function_id = raw_material_function_id

    @property
    def parent_company_id(self):
        """Gets the parent_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The parent company relationship with the declared supply chain  # noqa: E501

        :return: The parent_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_company_id

    @parent_company_id.setter
    def parent_company_id(self, parent_company_id):
        """Sets the parent_company_id of this DeclaredSupplyChainForCreationDto.

        The parent company relationship with the declared supply chain  # noqa: E501

        :param parent_company_id: The parent_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """
        if parent_company_id is None:
            raise ValueError("Invalid value for `parent_company_id`, must not be `None`")  # noqa: E501

        self._parent_company_id = parent_company_id

    @property
    def child_company_id(self):
        """Gets the child_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The child company relationship with the declared supply chain  # noqa: E501

        :return: The child_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._child_company_id

    @child_company_id.setter
    def child_company_id(self, child_company_id):
        """Sets the child_company_id of this DeclaredSupplyChainForCreationDto.

        The child company relationship with the declared supply chain  # noqa: E501

        :param child_company_id: The child_company_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """
        if child_company_id is None:
            raise ValueError("Invalid value for `child_company_id`, must not be `None`")  # noqa: E501

        self._child_company_id = child_company_id

    @property
    def product_name(self):
        """Gets the product_name of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        Product name  # noqa: E501

        :return: The product_name of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this DeclaredSupplyChainForCreationDto.

        Product name  # noqa: E501

        :param product_name: The product_name of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def product_reference(self):
        """Gets the product_reference of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        Product reference  # noqa: E501

        :return: The product_reference of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._product_reference

    @product_reference.setter
    def product_reference(self, product_reference):
        """Sets the product_reference of this DeclaredSupplyChainForCreationDto.

        Product reference  # noqa: E501

        :param product_reference: The product_reference of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """
        if product_reference is None:
            raise ValueError("Invalid value for `product_reference`, must not be `None`")  # noqa: E501

        self._product_reference = product_reference

    @property
    def parent_declared_supply_chain_id(self):
        """Gets the parent_declared_supply_chain_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The parent declared supply chain relationship  # noqa: E501

        :return: The parent_declared_supply_chain_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_declared_supply_chain_id

    @parent_declared_supply_chain_id.setter
    def parent_declared_supply_chain_id(self, parent_declared_supply_chain_id):
        """Sets the parent_declared_supply_chain_id of this DeclaredSupplyChainForCreationDto.

        The parent declared supply chain relationship  # noqa: E501

        :param parent_declared_supply_chain_id: The parent_declared_supply_chain_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """

        self._parent_declared_supply_chain_id = parent_declared_supply_chain_id

    @property
    def site_ids(self):
        """Gets the site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The sites for the supply chain  # noqa: E501

        :return: The site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._site_ids

    @site_ids.setter
    def site_ids(self, site_ids):
        """Sets the site_ids of this DeclaredSupplyChainForCreationDto.

        The sites for the supply chain  # noqa: E501

        :param site_ids: The site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: list[str]
        """

        self._site_ids = site_ids

    @property
    def customer_site_ids(self):
        """Gets the customer_site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The customer sites for the supply chain  # noqa: E501

        :return: The customer_site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._customer_site_ids

    @customer_site_ids.setter
    def customer_site_ids(self, customer_site_ids):
        """Sets the customer_site_ids of this DeclaredSupplyChainForCreationDto.

        The customer sites for the supply chain  # noqa: E501

        :param customer_site_ids: The customer_site_ids of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: list[str]
        """

        self._customer_site_ids = customer_site_ids

    @property
    def parent_product_line_id(self):
        """Gets the parent_product_line_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The parent product line identifier  # noqa: E501

        :return: The parent_product_line_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_product_line_id

    @parent_product_line_id.setter
    def parent_product_line_id(self, parent_product_line_id):
        """Sets the parent_product_line_id of this DeclaredSupplyChainForCreationDto.

        The parent product line identifier  # noqa: E501

        :param parent_product_line_id: The parent_product_line_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """

        self._parent_product_line_id = parent_product_line_id

    @property
    def raw_material_function_id(self):
        """Gets the raw_material_function_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501

        The function unique identifier for the requested product raw material, if none provided, the default will be 'Supplier'  # noqa: E501

        :return: The raw_material_function_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._raw_material_function_id

    @raw_material_function_id.setter
    def raw_material_function_id(self, raw_material_function_id):
        """Sets the raw_material_function_id of this DeclaredSupplyChainForCreationDto.

        The function unique identifier for the requested product raw material, if none provided, the default will be 'Supplier'  # noqa: E501

        :param raw_material_function_id: The raw_material_function_id of this DeclaredSupplyChainForCreationDto.  # noqa: E501
        :type: str
        """

        self._raw_material_function_id = raw_material_function_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeclaredSupplyChainForCreationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeclaredSupplyChainForCreationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
